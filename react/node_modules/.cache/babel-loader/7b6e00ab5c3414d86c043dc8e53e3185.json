{"ast":null,"code":"import * as ws from 'lib0/websocket';\nimport * as map from 'lib0/map';\nimport * as error from 'lib0/error';\nimport * as random from 'lib0/random';\nimport * as encoding from 'lib0/encoding';\nimport * as decoding from 'lib0/decoding';\nimport { Observable } from 'lib0/observable';\nimport * as logging from 'lib0/logging';\nimport * as promise from 'lib0/promise';\nimport * as bc from 'lib0/broadcastchannel';\nimport * as buffer from 'lib0/buffer';\nimport * as math from 'lib0/math';\nimport { createMutex } from 'lib0/mutex';\nimport * as Y from 'yjs'; // eslint-disable-line\n\nimport Peer from 'simple-peer/simplepeer.min.js';\nimport * as syncProtocol from 'y-protocols/sync';\nimport * as awarenessProtocol from 'y-protocols/awareness';\nimport * as cryptoutils from './crypto.js';\nconst log = logging.createModuleLogger('y-webrtc');\nconst messageSync = 0;\nconst messageQueryAwareness = 3;\nconst messageAwareness = 1;\nconst messageBcPeerId = 4;\n/**\n * @type {Map<string, SignalingConn>}\n */\n\nconst signalingConns = new Map();\n/**\n * @type {Map<string,Room>}\n */\n\nconst rooms = new Map();\n/**\n * @param {Room} room\n */\n\nconst checkIsSynced = room => {\n  let synced = true;\n  room.webrtcConns.forEach(peer => {\n    if (!peer.synced) {\n      synced = false;\n    }\n  });\n\n  if (!synced && room.synced || synced && !room.synced) {\n    room.synced = synced;\n    room.provider.emit('synced', [{\n      synced\n    }]);\n    log('synced ', logging.BOLD, room.name, logging.UNBOLD, ' with all peers');\n  }\n};\n/**\n * @param {Room} room\n * @param {Uint8Array} buf\n * @param {function} syncedCallback\n * @return {encoding.Encoder?}\n */\n\n\nconst readMessage = (room, buf, syncedCallback) => {\n  const decoder = decoding.createDecoder(buf);\n  const encoder = encoding.createEncoder();\n  const messageType = decoding.readVarUint(decoder);\n\n  if (room === undefined) {\n    return null;\n  }\n\n  const awareness = room.awareness;\n  const doc = room.doc;\n  let sendReply = false;\n\n  switch (messageType) {\n    case messageSync:\n      {\n        encoding.writeVarUint(encoder, messageSync);\n        const syncMessageType = syncProtocol.readSyncMessage(decoder, encoder, doc, room);\n\n        if (syncMessageType === syncProtocol.messageYjsSyncStep2 && !room.synced) {\n          syncedCallback();\n        }\n\n        if (syncMessageType === syncProtocol.messageYjsSyncStep1) {\n          sendReply = true;\n        }\n\n        break;\n      }\n\n    case messageQueryAwareness:\n      encoding.writeVarUint(encoder, messageAwareness);\n      encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(awareness, Array.from(awareness.getStates().keys())));\n      sendReply = true;\n      break;\n\n    case messageAwareness:\n      awarenessProtocol.applyAwarenessUpdate(awareness, decoding.readVarUint8Array(decoder), room);\n      break;\n\n    case messageBcPeerId:\n      {\n        const add = decoding.readUint8(decoder) === 1;\n        const peerName = decoding.readVarString(decoder);\n\n        if (peerName !== room.peerId && (room.bcConns.has(peerName) && !add || !room.bcConns.has(peerName) && add)) {\n          const removed = [];\n          const added = [];\n\n          if (add) {\n            room.bcConns.add(peerName);\n            added.push(peerName);\n          } else {\n            room.bcConns.delete(peerName);\n            removed.push(peerName);\n          }\n\n          room.provider.emit('peers', [{\n            added,\n            removed,\n            webrtcPeers: Array.from(room.webrtcConns.keys()),\n            bcPeers: Array.from(room.bcConns)\n          }]);\n          broadcastBcPeerId(room);\n        }\n\n        break;\n      }\n\n    default:\n      console.error('Unable to compute message');\n      return encoder;\n  }\n\n  if (!sendReply) {\n    // nothing has been written, no answer created\n    return null;\n  }\n\n  return encoder;\n};\n/**\n * @param {WebrtcConn} peerConn\n * @param {Uint8Array} buf\n * @return {encoding.Encoder?}\n */\n\n\nconst readPeerMessage = (peerConn, buf) => {\n  const room = peerConn.room;\n  log('received message from ', logging.BOLD, peerConn.remotePeerId, logging.GREY, ' (', room.name, ')', logging.UNBOLD, logging.UNCOLOR);\n  return readMessage(room, buf, () => {\n    peerConn.synced = true;\n    log('synced ', logging.BOLD, room.name, logging.UNBOLD, ' with ', logging.BOLD, peerConn.remotePeerId);\n    checkIsSynced(room);\n  });\n};\n/**\n * @param {WebrtcConn} webrtcConn\n * @param {encoding.Encoder} encoder\n */\n\n\nconst sendWebrtcConn = (webrtcConn, encoder) => {\n  log('send message to ', logging.BOLD, webrtcConn.remotePeerId, logging.UNBOLD, logging.GREY, ' (', webrtcConn.room.name, ')', logging.UNCOLOR);\n\n  try {\n    webrtcConn.peer.send(encoding.toUint8Array(encoder));\n  } catch (e) {}\n};\n/**\n * @param {Room} room\n * @param {Uint8Array} m\n */\n\n\nconst broadcastWebrtcConn = (room, m) => {\n  log('broadcast message in ', logging.BOLD, room.name, logging.UNBOLD);\n  room.webrtcConns.forEach(conn => {\n    try {\n      conn.peer.send(m);\n    } catch (e) {}\n  });\n};\n\nexport class WebrtcConn {\n  /**\n   * @param {SignalingConn} signalingConn\n   * @param {boolean} initiator\n   * @param {string} remotePeerId\n   * @param {Room} room\n   */\n  constructor(signalingConn, initiator, remotePeerId, room) {\n    log('establishing connection to ', logging.BOLD, remotePeerId);\n    this.room = room;\n    this.remotePeerId = remotePeerId;\n    this.closed = false;\n    this.connected = false;\n    this.synced = false;\n    /**\n     * @type {any}\n     */\n\n    this.peer = new Peer({\n      initiator,\n      ...room.provider.peerOpts\n    });\n    this.peer.on('signal', signal => {\n      publishSignalingMessage(signalingConn, room, {\n        to: remotePeerId,\n        from: room.peerId,\n        type: 'signal',\n        signal\n      });\n    });\n    this.peer.on('connect', () => {\n      log('connected to ', logging.BOLD, remotePeerId);\n      this.connected = true; // send sync step 1\n\n      const provider = room.provider;\n      const doc = provider.doc;\n      const awareness = room.awareness;\n      const encoder = encoding.createEncoder();\n      encoding.writeVarUint(encoder, messageSync);\n      syncProtocol.writeSyncStep1(encoder, doc);\n      sendWebrtcConn(this, encoder);\n      const awarenessStates = awareness.getStates();\n\n      if (awarenessStates.size > 0) {\n        const encoder = encoding.createEncoder();\n        encoding.writeVarUint(encoder, messageAwareness);\n        encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(awareness, Array.from(awarenessStates.keys())));\n        sendWebrtcConn(this, encoder);\n      }\n    });\n    this.peer.on('close', () => {\n      this.connected = false;\n      this.closed = true;\n\n      if (room.webrtcConns.has(this.remotePeerId)) {\n        room.webrtcConns.delete(this.remotePeerId);\n        room.provider.emit('peers', [{\n          removed: [this.remotePeerId],\n          added: [],\n          webrtcPeers: Array.from(room.webrtcConns.keys()),\n          bcPeers: Array.from(room.bcConns)\n        }]);\n      }\n\n      checkIsSynced(room);\n      this.peer.destroy();\n      log('closed connection to ', logging.BOLD, remotePeerId);\n      announceSignalingInfo(room);\n    });\n    this.peer.on('error', err => {\n      log('Error in connection to ', logging.BOLD, remotePeerId, ': ', err);\n      announceSignalingInfo(room);\n    });\n    this.peer.on('data', data => {\n      const answer = readPeerMessage(this, data);\n\n      if (answer !== null) {\n        sendWebrtcConn(this, answer);\n      }\n    });\n  }\n\n  destroy() {\n    this.peer.destroy();\n  }\n\n}\n/**\n * @param {Room} room\n * @param {Uint8Array} m\n */\n\nconst broadcastBcMessage = (room, m) => cryptoutils.encrypt(m, room.key).then(data => room.mux(() => bc.publish(room.name, data)));\n/**\n * @param {Room} room\n * @param {Uint8Array} m\n */\n\n\nconst broadcastRoomMessage = (room, m) => {\n  if (room.bcconnected) {\n    broadcastBcMessage(room, m);\n  }\n\n  broadcastWebrtcConn(room, m);\n};\n/**\n * @param {Room} room\n */\n\n\nconst announceSignalingInfo = room => {\n  signalingConns.forEach(conn => {\n    // only subcribe if connection is established, otherwise the conn automatically subscribes to all rooms\n    if (conn.connected) {\n      conn.send({\n        type: 'subscribe',\n        topics: [room.name]\n      });\n\n      if (room.webrtcConns.size < room.provider.maxConns) {\n        publishSignalingMessage(conn, room, {\n          type: 'announce',\n          from: room.peerId\n        });\n      }\n    }\n  });\n};\n/**\n * @param {Room} room\n */\n\n\nconst broadcastBcPeerId = room => {\n  if (room.provider.filterBcConns) {\n    // broadcast peerId via broadcastchannel\n    const encoderPeerIdBc = encoding.createEncoder();\n    encoding.writeVarUint(encoderPeerIdBc, messageBcPeerId);\n    encoding.writeUint8(encoderPeerIdBc, 1);\n    encoding.writeVarString(encoderPeerIdBc, room.peerId);\n    broadcastBcMessage(room, encoding.toUint8Array(encoderPeerIdBc));\n  }\n};\n\nexport class Room {\n  /**\n   * @param {Y.Doc} doc\n   * @param {WebrtcProvider} provider\n   * @param {string} name\n   * @param {CryptoKey|null} key\n   */\n  constructor(doc, provider, name, key) {\n    /**\n     * Do not assume that peerId is unique. This is only meant for sending signaling messages.\n     *\n     * @type {string}\n     */\n    this.peerId = random.uuidv4();\n    this.doc = doc;\n    /**\n     * @type {awarenessProtocol.Awareness}\n     */\n\n    this.awareness = provider.awareness;\n    this.provider = provider;\n    this.synced = false;\n    this.name = name; // @todo make key secret by scoping\n\n    this.key = key;\n    /**\n     * @type {Map<string, WebrtcConn>}\n     */\n\n    this.webrtcConns = new Map();\n    /**\n     * @type {Set<string>}\n     */\n\n    this.bcConns = new Set();\n    this.mux = createMutex();\n    this.bcconnected = false;\n    /**\n     * @param {ArrayBuffer} data\n     */\n\n    this._bcSubscriber = data => cryptoutils.decrypt(new Uint8Array(data), key).then(m => this.mux(() => {\n      const reply = readMessage(this, m, () => {});\n\n      if (reply) {\n        broadcastBcMessage(this, encoding.toUint8Array(reply));\n      }\n    }));\n    /**\n     * Listens to Yjs updates and sends them to remote peers\n     *\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */\n\n\n    this._docUpdateHandler = (update, origin) => {\n      const encoder = encoding.createEncoder();\n      encoding.writeVarUint(encoder, messageSync);\n      syncProtocol.writeUpdate(encoder, update);\n      broadcastRoomMessage(this, encoding.toUint8Array(encoder));\n    };\n    /**\n     * Listens to Awareness updates and sends them to remote peers\n     *\n     * @param {any} changed\n     * @param {any} origin\n     */\n\n\n    this._awarenessUpdateHandler = (_ref, origin) => {\n      let {\n        added,\n        updated,\n        removed\n      } = _ref;\n      const changedClients = added.concat(updated).concat(removed);\n      const encoderAwareness = encoding.createEncoder();\n      encoding.writeVarUint(encoderAwareness, messageAwareness);\n      encoding.writeVarUint8Array(encoderAwareness, awarenessProtocol.encodeAwarenessUpdate(this.awareness, changedClients));\n      broadcastRoomMessage(this, encoding.toUint8Array(encoderAwareness));\n    };\n\n    this._beforeUnloadHandler = () => {\n      awarenessProtocol.removeAwarenessStates(this.awareness, [doc.clientID], 'window unload');\n      rooms.forEach(room => {\n        room.disconnect();\n      });\n    };\n\n    if (typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', this._beforeUnloadHandler);\n    } else if (typeof process !== 'undefined') {\n      process.on('exit', this._beforeUnloadHandler);\n    }\n  }\n\n  connect() {\n    this.doc.on('update', this._docUpdateHandler);\n    this.awareness.on('update', this._awarenessUpdateHandler); // signal through all available signaling connections\n\n    announceSignalingInfo(this);\n    const roomName = this.name;\n    bc.subscribe(roomName, this._bcSubscriber);\n    this.bcconnected = true; // broadcast peerId via broadcastchannel\n\n    broadcastBcPeerId(this); // write sync step 1\n\n    const encoderSync = encoding.createEncoder();\n    encoding.writeVarUint(encoderSync, messageSync);\n    syncProtocol.writeSyncStep1(encoderSync, this.doc);\n    broadcastBcMessage(this, encoding.toUint8Array(encoderSync)); // broadcast local state\n\n    const encoderState = encoding.createEncoder();\n    encoding.writeVarUint(encoderState, messageSync);\n    syncProtocol.writeSyncStep2(encoderState, this.doc);\n    broadcastBcMessage(this, encoding.toUint8Array(encoderState)); // write queryAwareness\n\n    const encoderAwarenessQuery = encoding.createEncoder();\n    encoding.writeVarUint(encoderAwarenessQuery, messageQueryAwareness);\n    broadcastBcMessage(this, encoding.toUint8Array(encoderAwarenessQuery)); // broadcast local awareness state\n\n    const encoderAwarenessState = encoding.createEncoder();\n    encoding.writeVarUint(encoderAwarenessState, messageAwareness);\n    encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID]));\n    broadcastBcMessage(this, encoding.toUint8Array(encoderAwarenessState));\n  }\n\n  disconnect() {\n    // signal through all available signaling connections\n    signalingConns.forEach(conn => {\n      if (conn.connected) {\n        conn.send({\n          type: 'unsubscribe',\n          topics: [this.name]\n        });\n      }\n    });\n    awarenessProtocol.removeAwarenessStates(this.awareness, [this.doc.clientID], 'disconnect'); // broadcast peerId removal via broadcastchannel\n\n    const encoderPeerIdBc = encoding.createEncoder();\n    encoding.writeVarUint(encoderPeerIdBc, messageBcPeerId);\n    encoding.writeUint8(encoderPeerIdBc, 0); // remove peerId from other bc peers\n\n    encoding.writeVarString(encoderPeerIdBc, this.peerId);\n    broadcastBcMessage(this, encoding.toUint8Array(encoderPeerIdBc));\n    bc.unsubscribe(this.name, this._bcSubscriber);\n    this.bcconnected = false;\n    this.doc.off('update', this._docUpdateHandler);\n    this.awareness.off('update', this._awarenessUpdateHandler);\n    this.webrtcConns.forEach(conn => conn.destroy());\n  }\n\n  destroy() {\n    this.disconnect();\n\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('beforeunload', this._beforeUnloadHandler);\n    } else if (typeof process !== 'undefined') {\n      process.off('exit', this._beforeUnloadHandler);\n    }\n  }\n\n}\n/**\n * @param {Y.Doc} doc\n * @param {WebrtcProvider} provider\n * @param {string} name\n * @param {CryptoKey|null} key\n * @return {Room}\n */\n\nconst openRoom = (doc, provider, name, key) => {\n  // there must only be one room\n  if (rooms.has(name)) {\n    throw error.create(`A Yjs Doc connected to room \"${name}\" already exists!`);\n  }\n\n  const room = new Room(doc, provider, name, key);\n  rooms.set(name,\n  /** @type {Room} */\n  room);\n  return room;\n};\n/**\n * @param {SignalingConn} conn\n * @param {Room} room\n * @param {any} data\n */\n\n\nconst publishSignalingMessage = (conn, room, data) => {\n  if (room.key) {\n    cryptoutils.encryptJson(data, room.key).then(data => {\n      conn.send({\n        type: 'publish',\n        topic: room.name,\n        data: buffer.toBase64(data)\n      });\n    });\n  } else {\n    conn.send({\n      type: 'publish',\n      topic: room.name,\n      data\n    });\n  }\n};\n\nexport class SignalingConn extends ws.WebsocketClient {\n  constructor(url) {\n    super(url);\n    /**\n     * @type {Set<WebrtcProvider>}\n     */\n\n    this.providers = new Set();\n    this.on('connect', () => {\n      log(`connected (${url})`);\n      const topics = Array.from(rooms.keys());\n      this.send({\n        type: 'subscribe',\n        topics\n      });\n      rooms.forEach(room => publishSignalingMessage(this, room, {\n        type: 'announce',\n        from: room.peerId\n      }));\n    });\n    this.on('message', m => {\n      switch (m.type) {\n        case 'publish':\n          {\n            const roomName = m.topic;\n            const room = rooms.get(roomName);\n\n            if (room == null || typeof roomName !== 'string') {\n              return;\n            }\n\n            const execMessage = data => {\n              const webrtcConns = room.webrtcConns;\n              const peerId = room.peerId;\n\n              if (data == null || data.from === peerId || data.to !== undefined && data.to !== peerId || room.bcConns.has(data.from)) {\n                // ignore messages that are not addressed to this conn, or from clients that are connected via broadcastchannel\n                return;\n              }\n\n              const emitPeerChange = webrtcConns.has(data.from) ? () => {} : () => room.provider.emit('peers', [{\n                removed: [],\n                added: [data.from],\n                webrtcPeers: Array.from(room.webrtcConns.keys()),\n                bcPeers: Array.from(room.bcConns)\n              }]);\n\n              switch (data.type) {\n                case 'announce':\n                  if (webrtcConns.size < room.provider.maxConns) {\n                    map.setIfUndefined(webrtcConns, data.from, () => new WebrtcConn(this, true, data.from, room));\n                    emitPeerChange();\n                  }\n\n                  break;\n\n                case 'signal':\n                  if (data.to === peerId) {\n                    map.setIfUndefined(webrtcConns, data.from, () => new WebrtcConn(this, false, data.from, room)).peer.signal(data.signal);\n                    emitPeerChange();\n                  }\n\n                  break;\n              }\n            };\n\n            if (room.key) {\n              if (typeof m.data === 'string') {\n                cryptoutils.decryptJson(buffer.fromBase64(m.data), room.key).then(execMessage);\n              }\n            } else {\n              execMessage(m.data);\n            }\n          }\n      }\n    });\n    this.on('disconnect', () => log(`disconnect (${url})`));\n  }\n\n}\n/**\n * @extends Observable<string>\n */\n\nexport class WebrtcProvider extends Observable {\n  /**\n   * @param {string} roomName\n   * @param {Y.Doc} doc\n   * @param {Object} [opts]\n   * @param {Array<string>?} [opts.signaling]\n   * @param {string?} [opts.password]\n   * @param {awarenessProtocol.Awareness?} [opts.awareness]\n   * @param {number?} [opts.maxConns]\n   * @param {boolean?} [opts.filterBcConns]\n   * @param {any?} [opts.peerOpts]\n   */\n  constructor(roomName, doc) {\n    let {\n      signaling = ['wss://signaling.yjs.dev', 'wss://y-webrtc-signaling-eu.herokuapp.com', 'wss://y-webrtc-signaling-us.herokuapp.com'],\n      password = null,\n      awareness = new awarenessProtocol.Awareness(doc),\n      maxConns = 20 + math.floor(random.rand() * 15),\n      // the random factor reduces the chance that n clients form a cluster\n      filterBcConns = true,\n      peerOpts = {} // simple-peer options. See https://github.com/feross/simple-peer#peer--new-peeropts\n\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    this.roomName = roomName;\n    this.doc = doc;\n    this.filterBcConns = filterBcConns;\n    /**\n     * @type {awarenessProtocol.Awareness}\n     */\n\n    this.awareness = awareness;\n    this.shouldConnect = false;\n    this.signalingUrls = signaling;\n    this.signalingConns = [];\n    this.maxConns = maxConns;\n    this.peerOpts = peerOpts;\n    /**\n     * @type {PromiseLike<CryptoKey | null>}\n     */\n\n    this.key = password ? cryptoutils.deriveKey(password, roomName) :\n    /** @type {PromiseLike<null>} */\n    promise.resolve(null);\n    /**\n     * @type {Room|null}\n     */\n\n    this.room = null;\n    this.key.then(key => {\n      this.room = openRoom(doc, this, roomName, key);\n\n      if (this.shouldConnect) {\n        this.room.connect();\n      } else {\n        this.room.disconnect();\n      }\n    });\n    this.connect();\n    this.destroy = this.destroy.bind(this);\n    doc.on('destroy', this.destroy);\n  }\n  /**\n   * @type {boolean}\n   */\n\n\n  get connected() {\n    return this.room !== null && this.shouldConnect;\n  }\n\n  connect() {\n    this.shouldConnect = true;\n    this.signalingUrls.forEach(url => {\n      const signalingConn = map.setIfUndefined(signalingConns, url, () => new SignalingConn(url));\n      this.signalingConns.push(signalingConn);\n      signalingConn.providers.add(this);\n    });\n\n    if (this.room) {\n      this.room.connect();\n    }\n  }\n\n  disconnect() {\n    this.shouldConnect = false;\n    this.signalingConns.forEach(conn => {\n      conn.providers.delete(this);\n\n      if (conn.providers.size === 0) {\n        conn.destroy();\n        signalingConns.delete(conn.url);\n      }\n    });\n\n    if (this.room) {\n      this.room.disconnect();\n    }\n  }\n\n  destroy() {\n    this.doc.off('destroy', this.destroy); // need to wait for key before deleting room\n\n    this.key.then(() => {\n      /** @type {Room} */\n      this.room.destroy();\n      rooms.delete(this.roomName);\n    });\n    super.destroy();\n  }\n\n}","map":{"version":3,"names":["ws","map","error","random","encoding","decoding","Observable","logging","promise","bc","buffer","math","createMutex","Y","Peer","syncProtocol","awarenessProtocol","cryptoutils","log","createModuleLogger","messageSync","messageQueryAwareness","messageAwareness","messageBcPeerId","signalingConns","Map","rooms","checkIsSynced","room","synced","webrtcConns","forEach","peer","provider","emit","BOLD","name","UNBOLD","readMessage","buf","syncedCallback","decoder","createDecoder","encoder","createEncoder","messageType","readVarUint","undefined","awareness","doc","sendReply","writeVarUint","syncMessageType","readSyncMessage","messageYjsSyncStep2","messageYjsSyncStep1","writeVarUint8Array","encodeAwarenessUpdate","Array","from","getStates","keys","applyAwarenessUpdate","readVarUint8Array","add","readUint8","peerName","readVarString","peerId","bcConns","has","removed","added","push","delete","webrtcPeers","bcPeers","broadcastBcPeerId","console","readPeerMessage","peerConn","remotePeerId","GREY","UNCOLOR","sendWebrtcConn","webrtcConn","send","toUint8Array","e","broadcastWebrtcConn","m","conn","WebrtcConn","constructor","signalingConn","initiator","closed","connected","peerOpts","on","signal","publishSignalingMessage","to","type","writeSyncStep1","awarenessStates","size","destroy","announceSignalingInfo","err","data","answer","broadcastBcMessage","encrypt","key","then","mux","publish","broadcastRoomMessage","bcconnected","topics","maxConns","filterBcConns","encoderPeerIdBc","writeUint8","writeVarString","Room","uuidv4","Set","_bcSubscriber","decrypt","Uint8Array","reply","_docUpdateHandler","update","origin","writeUpdate","_awarenessUpdateHandler","updated","changedClients","concat","encoderAwareness","_beforeUnloadHandler","removeAwarenessStates","clientID","disconnect","window","addEventListener","process","connect","roomName","subscribe","encoderSync","encoderState","writeSyncStep2","encoderAwarenessQuery","encoderAwarenessState","unsubscribe","off","removeEventListener","openRoom","create","set","encryptJson","topic","toBase64","SignalingConn","WebsocketClient","url","providers","get","execMessage","emitPeerChange","setIfUndefined","decryptJson","fromBase64","WebrtcProvider","signaling","password","Awareness","floor","rand","shouldConnect","signalingUrls","deriveKey","resolve","bind"],"sources":["/Users/kuldeepupreti/Downloads/Projects/personal/yjs/node_modules/y-webrtc/src/y-webrtc.js"],"sourcesContent":["import * as ws from 'lib0/websocket'\nimport * as map from 'lib0/map'\nimport * as error from 'lib0/error'\nimport * as random from 'lib0/random'\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport { Observable } from 'lib0/observable'\nimport * as logging from 'lib0/logging'\nimport * as promise from 'lib0/promise'\nimport * as bc from 'lib0/broadcastchannel'\nimport * as buffer from 'lib0/buffer'\nimport * as math from 'lib0/math'\nimport { createMutex } from 'lib0/mutex'\n\nimport * as Y from 'yjs' // eslint-disable-line\nimport Peer from 'simple-peer/simplepeer.min.js'\n\nimport * as syncProtocol from 'y-protocols/sync'\nimport * as awarenessProtocol from 'y-protocols/awareness'\n\nimport * as cryptoutils from './crypto.js'\n\nconst log = logging.createModuleLogger('y-webrtc')\n\nconst messageSync = 0\nconst messageQueryAwareness = 3\nconst messageAwareness = 1\nconst messageBcPeerId = 4\n\n/**\n * @type {Map<string, SignalingConn>}\n */\nconst signalingConns = new Map()\n\n/**\n * @type {Map<string,Room>}\n */\nconst rooms = new Map()\n\n/**\n * @param {Room} room\n */\nconst checkIsSynced = room => {\n  let synced = true\n  room.webrtcConns.forEach(peer => {\n    if (!peer.synced) {\n      synced = false\n    }\n  })\n  if ((!synced && room.synced) || (synced && !room.synced)) {\n    room.synced = synced\n    room.provider.emit('synced', [{ synced }])\n    log('synced ', logging.BOLD, room.name, logging.UNBOLD, ' with all peers')\n  }\n}\n\n/**\n * @param {Room} room\n * @param {Uint8Array} buf\n * @param {function} syncedCallback\n * @return {encoding.Encoder?}\n */\nconst readMessage = (room, buf, syncedCallback) => {\n  const decoder = decoding.createDecoder(buf)\n  const encoder = encoding.createEncoder()\n  const messageType = decoding.readVarUint(decoder)\n  if (room === undefined) {\n    return null\n  }\n  const awareness = room.awareness\n  const doc = room.doc\n  let sendReply = false\n  switch (messageType) {\n    case messageSync: {\n      encoding.writeVarUint(encoder, messageSync)\n      const syncMessageType = syncProtocol.readSyncMessage(decoder, encoder, doc, room)\n      if (syncMessageType === syncProtocol.messageYjsSyncStep2 && !room.synced) {\n        syncedCallback()\n      }\n      if (syncMessageType === syncProtocol.messageYjsSyncStep1) {\n        sendReply = true\n      }\n      break\n    }\n    case messageQueryAwareness:\n      encoding.writeVarUint(encoder, messageAwareness)\n      encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(awareness, Array.from(awareness.getStates().keys())))\n      sendReply = true\n      break\n    case messageAwareness:\n      awarenessProtocol.applyAwarenessUpdate(awareness, decoding.readVarUint8Array(decoder), room)\n      break\n    case messageBcPeerId: {\n      const add = decoding.readUint8(decoder) === 1\n      const peerName = decoding.readVarString(decoder)\n      if (peerName !== room.peerId && ((room.bcConns.has(peerName) && !add) || (!room.bcConns.has(peerName) && add))) {\n        const removed = []\n        const added = []\n        if (add) {\n          room.bcConns.add(peerName)\n          added.push(peerName)\n        } else {\n          room.bcConns.delete(peerName)\n          removed.push(peerName)\n        }\n        room.provider.emit('peers', [{\n          added,\n          removed,\n          webrtcPeers: Array.from(room.webrtcConns.keys()),\n          bcPeers: Array.from(room.bcConns)\n        }])\n        broadcastBcPeerId(room)\n      }\n      break\n    }\n    default:\n      console.error('Unable to compute message')\n      return encoder\n  }\n  if (!sendReply) {\n    // nothing has been written, no answer created\n    return null\n  }\n  return encoder\n}\n\n/**\n * @param {WebrtcConn} peerConn\n * @param {Uint8Array} buf\n * @return {encoding.Encoder?}\n */\nconst readPeerMessage = (peerConn, buf) => {\n  const room = peerConn.room\n  log('received message from ', logging.BOLD, peerConn.remotePeerId, logging.GREY, ' (', room.name, ')', logging.UNBOLD, logging.UNCOLOR)\n  return readMessage(room, buf, () => {\n    peerConn.synced = true\n    log('synced ', logging.BOLD, room.name, logging.UNBOLD, ' with ', logging.BOLD, peerConn.remotePeerId)\n    checkIsSynced(room)\n  })\n}\n\n/**\n * @param {WebrtcConn} webrtcConn\n * @param {encoding.Encoder} encoder\n */\nconst sendWebrtcConn = (webrtcConn, encoder) => {\n  log('send message to ', logging.BOLD, webrtcConn.remotePeerId, logging.UNBOLD, logging.GREY, ' (', webrtcConn.room.name, ')', logging.UNCOLOR)\n  try {\n    webrtcConn.peer.send(encoding.toUint8Array(encoder))\n  } catch (e) {}\n}\n\n/**\n * @param {Room} room\n * @param {Uint8Array} m\n */\nconst broadcastWebrtcConn = (room, m) => {\n  log('broadcast message in ', logging.BOLD, room.name, logging.UNBOLD)\n  room.webrtcConns.forEach(conn => {\n    try {\n      conn.peer.send(m)\n    } catch (e) {}\n  })\n}\n\nexport class WebrtcConn {\n  /**\n   * @param {SignalingConn} signalingConn\n   * @param {boolean} initiator\n   * @param {string} remotePeerId\n   * @param {Room} room\n   */\n  constructor (signalingConn, initiator, remotePeerId, room) {\n    log('establishing connection to ', logging.BOLD, remotePeerId)\n    this.room = room\n    this.remotePeerId = remotePeerId\n    this.closed = false\n    this.connected = false\n    this.synced = false\n    /**\n     * @type {any}\n     */\n    this.peer = new Peer({ initiator, ...room.provider.peerOpts })\n    this.peer.on('signal', signal => {\n      publishSignalingMessage(signalingConn, room, { to: remotePeerId, from: room.peerId, type: 'signal', signal })\n    })\n    this.peer.on('connect', () => {\n      log('connected to ', logging.BOLD, remotePeerId)\n      this.connected = true\n      // send sync step 1\n      const provider = room.provider\n      const doc = provider.doc\n      const awareness = room.awareness\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageSync)\n      syncProtocol.writeSyncStep1(encoder, doc)\n      sendWebrtcConn(this, encoder)\n      const awarenessStates = awareness.getStates()\n      if (awarenessStates.size > 0) {\n        const encoder = encoding.createEncoder()\n        encoding.writeVarUint(encoder, messageAwareness)\n        encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(awareness, Array.from(awarenessStates.keys())))\n        sendWebrtcConn(this, encoder)\n      }\n    })\n    this.peer.on('close', () => {\n      this.connected = false\n      this.closed = true\n      if (room.webrtcConns.has(this.remotePeerId)) {\n        room.webrtcConns.delete(this.remotePeerId)\n        room.provider.emit('peers', [{\n          removed: [this.remotePeerId],\n          added: [],\n          webrtcPeers: Array.from(room.webrtcConns.keys()),\n          bcPeers: Array.from(room.bcConns)\n        }])\n      }\n      checkIsSynced(room)\n      this.peer.destroy()\n      log('closed connection to ', logging.BOLD, remotePeerId)\n      announceSignalingInfo(room)\n    })\n    this.peer.on('error', err => {\n      log('Error in connection to ', logging.BOLD, remotePeerId, ': ', err)\n      announceSignalingInfo(room)\n    })\n    this.peer.on('data', data => {\n      const answer = readPeerMessage(this, data)\n      if (answer !== null) {\n        sendWebrtcConn(this, answer)\n      }\n    })\n  }\n\n  destroy () {\n    this.peer.destroy()\n  }\n}\n\n/**\n * @param {Room} room\n * @param {Uint8Array} m\n */\nconst broadcastBcMessage = (room, m) => cryptoutils.encrypt(m, room.key).then(data =>\n  room.mux(() =>\n    bc.publish(room.name, data)\n  )\n)\n\n/**\n * @param {Room} room\n * @param {Uint8Array} m\n */\nconst broadcastRoomMessage = (room, m) => {\n  if (room.bcconnected) {\n    broadcastBcMessage(room, m)\n  }\n  broadcastWebrtcConn(room, m)\n}\n\n/**\n * @param {Room} room\n */\nconst announceSignalingInfo = room => {\n  signalingConns.forEach(conn => {\n    // only subcribe if connection is established, otherwise the conn automatically subscribes to all rooms\n    if (conn.connected) {\n      conn.send({ type: 'subscribe', topics: [room.name] })\n      if (room.webrtcConns.size < room.provider.maxConns) {\n        publishSignalingMessage(conn, room, { type: 'announce', from: room.peerId })\n      }\n    }\n  })\n}\n\n/**\n * @param {Room} room\n */\nconst broadcastBcPeerId = room => {\n  if (room.provider.filterBcConns) {\n    // broadcast peerId via broadcastchannel\n    const encoderPeerIdBc = encoding.createEncoder()\n    encoding.writeVarUint(encoderPeerIdBc, messageBcPeerId)\n    encoding.writeUint8(encoderPeerIdBc, 1)\n    encoding.writeVarString(encoderPeerIdBc, room.peerId)\n    broadcastBcMessage(room, encoding.toUint8Array(encoderPeerIdBc))\n  }\n}\n\nexport class Room {\n  /**\n   * @param {Y.Doc} doc\n   * @param {WebrtcProvider} provider\n   * @param {string} name\n   * @param {CryptoKey|null} key\n   */\n  constructor (doc, provider, name, key) {\n    /**\n     * Do not assume that peerId is unique. This is only meant for sending signaling messages.\n     *\n     * @type {string}\n     */\n    this.peerId = random.uuidv4()\n    this.doc = doc\n    /**\n     * @type {awarenessProtocol.Awareness}\n     */\n    this.awareness = provider.awareness\n    this.provider = provider\n    this.synced = false\n    this.name = name\n    // @todo make key secret by scoping\n    this.key = key\n    /**\n     * @type {Map<string, WebrtcConn>}\n     */\n    this.webrtcConns = new Map()\n    /**\n     * @type {Set<string>}\n     */\n    this.bcConns = new Set()\n    this.mux = createMutex()\n    this.bcconnected = false\n    /**\n     * @param {ArrayBuffer} data\n     */\n    this._bcSubscriber = data =>\n      cryptoutils.decrypt(new Uint8Array(data), key).then(m =>\n        this.mux(() => {\n          const reply = readMessage(this, m, () => {})\n          if (reply) {\n            broadcastBcMessage(this, encoding.toUint8Array(reply))\n          }\n        })\n      )\n    /**\n     * Listens to Yjs updates and sends them to remote peers\n     *\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */\n    this._docUpdateHandler = (update, origin) => {\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageSync)\n      syncProtocol.writeUpdate(encoder, update)\n      broadcastRoomMessage(this, encoding.toUint8Array(encoder))\n    }\n    /**\n     * Listens to Awareness updates and sends them to remote peers\n     *\n     * @param {any} changed\n     * @param {any} origin\n     */\n    this._awarenessUpdateHandler = ({ added, updated, removed }, origin) => {\n      const changedClients = added.concat(updated).concat(removed)\n      const encoderAwareness = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwareness, messageAwareness)\n      encoding.writeVarUint8Array(encoderAwareness, awarenessProtocol.encodeAwarenessUpdate(this.awareness, changedClients))\n      broadcastRoomMessage(this, encoding.toUint8Array(encoderAwareness))\n    }\n\n    this._beforeUnloadHandler = () => {\n      awarenessProtocol.removeAwarenessStates(this.awareness, [doc.clientID], 'window unload')\n      rooms.forEach(room => {\n        room.disconnect()\n      })\n    }\n\n    if (typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', this._beforeUnloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.on('exit', this._beforeUnloadHandler)\n    }\n  }\n\n  connect () {\n    this.doc.on('update', this._docUpdateHandler)\n    this.awareness.on('update', this._awarenessUpdateHandler)\n    // signal through all available signaling connections\n    announceSignalingInfo(this)\n    const roomName = this.name\n    bc.subscribe(roomName, this._bcSubscriber)\n    this.bcconnected = true\n    // broadcast peerId via broadcastchannel\n    broadcastBcPeerId(this)\n    // write sync step 1\n    const encoderSync = encoding.createEncoder()\n    encoding.writeVarUint(encoderSync, messageSync)\n    syncProtocol.writeSyncStep1(encoderSync, this.doc)\n    broadcastBcMessage(this, encoding.toUint8Array(encoderSync))\n    // broadcast local state\n    const encoderState = encoding.createEncoder()\n    encoding.writeVarUint(encoderState, messageSync)\n    syncProtocol.writeSyncStep2(encoderState, this.doc)\n    broadcastBcMessage(this, encoding.toUint8Array(encoderState))\n    // write queryAwareness\n    const encoderAwarenessQuery = encoding.createEncoder()\n    encoding.writeVarUint(encoderAwarenessQuery, messageQueryAwareness)\n    broadcastBcMessage(this, encoding.toUint8Array(encoderAwarenessQuery))\n    // broadcast local awareness state\n    const encoderAwarenessState = encoding.createEncoder()\n    encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n    encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID]))\n    broadcastBcMessage(this, encoding.toUint8Array(encoderAwarenessState))\n  }\n\n  disconnect () {\n    // signal through all available signaling connections\n    signalingConns.forEach(conn => {\n      if (conn.connected) {\n        conn.send({ type: 'unsubscribe', topics: [this.name] })\n      }\n    })\n    awarenessProtocol.removeAwarenessStates(this.awareness, [this.doc.clientID], 'disconnect')\n    // broadcast peerId removal via broadcastchannel\n    const encoderPeerIdBc = encoding.createEncoder()\n    encoding.writeVarUint(encoderPeerIdBc, messageBcPeerId)\n    encoding.writeUint8(encoderPeerIdBc, 0) // remove peerId from other bc peers\n    encoding.writeVarString(encoderPeerIdBc, this.peerId)\n    broadcastBcMessage(this, encoding.toUint8Array(encoderPeerIdBc))\n\n    bc.unsubscribe(this.name, this._bcSubscriber)\n    this.bcconnected = false\n    this.doc.off('update', this._docUpdateHandler)\n    this.awareness.off('update', this._awarenessUpdateHandler)\n    this.webrtcConns.forEach(conn => conn.destroy())\n  }\n\n  destroy () {\n    this.disconnect()\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('beforeunload', this._beforeUnloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.off('exit', this._beforeUnloadHandler)\n    }\n  }\n}\n\n/**\n * @param {Y.Doc} doc\n * @param {WebrtcProvider} provider\n * @param {string} name\n * @param {CryptoKey|null} key\n * @return {Room}\n */\nconst openRoom = (doc, provider, name, key) => {\n  // there must only be one room\n  if (rooms.has(name)) {\n    throw error.create(`A Yjs Doc connected to room \"${name}\" already exists!`)\n  }\n  const room = new Room(doc, provider, name, key)\n  rooms.set(name, /** @type {Room} */ (room))\n  return room\n}\n\n/**\n * @param {SignalingConn} conn\n * @param {Room} room\n * @param {any} data\n */\nconst publishSignalingMessage = (conn, room, data) => {\n  if (room.key) {\n    cryptoutils.encryptJson(data, room.key).then(data => {\n      conn.send({ type: 'publish', topic: room.name, data: buffer.toBase64(data) })\n    })\n  } else {\n    conn.send({ type: 'publish', topic: room.name, data })\n  }\n}\n\nexport class SignalingConn extends ws.WebsocketClient {\n  constructor (url) {\n    super(url)\n    /**\n     * @type {Set<WebrtcProvider>}\n     */\n    this.providers = new Set()\n    this.on('connect', () => {\n      log(`connected (${url})`)\n      const topics = Array.from(rooms.keys())\n      this.send({ type: 'subscribe', topics })\n      rooms.forEach(room =>\n        publishSignalingMessage(this, room, { type: 'announce', from: room.peerId })\n      )\n    })\n    this.on('message', m => {\n      switch (m.type) {\n        case 'publish': {\n          const roomName = m.topic\n          const room = rooms.get(roomName)\n          if (room == null || typeof roomName !== 'string') {\n            return\n          }\n          const execMessage = data => {\n            const webrtcConns = room.webrtcConns\n            const peerId = room.peerId\n            if (data == null || data.from === peerId || (data.to !== undefined && data.to !== peerId) || room.bcConns.has(data.from)) {\n              // ignore messages that are not addressed to this conn, or from clients that are connected via broadcastchannel\n              return\n            }\n            const emitPeerChange = webrtcConns.has(data.from)\n              ? () => {}\n              : () =>\n                room.provider.emit('peers', [{\n                  removed: [],\n                  added: [data.from],\n                  webrtcPeers: Array.from(room.webrtcConns.keys()),\n                  bcPeers: Array.from(room.bcConns)\n                }])\n            switch (data.type) {\n              case 'announce':\n                if (webrtcConns.size < room.provider.maxConns) {\n                  map.setIfUndefined(webrtcConns, data.from, () => new WebrtcConn(this, true, data.from, room))\n                  emitPeerChange()\n                }\n                break\n              case 'signal':\n                if (data.to === peerId) {\n                  map.setIfUndefined(webrtcConns, data.from, () => new WebrtcConn(this, false, data.from, room)).peer.signal(data.signal)\n                  emitPeerChange()\n                }\n                break\n            }\n          }\n          if (room.key) {\n            if (typeof m.data === 'string') {\n              cryptoutils.decryptJson(buffer.fromBase64(m.data), room.key).then(execMessage)\n            }\n          } else {\n            execMessage(m.data)\n          }\n        }\n      }\n    })\n    this.on('disconnect', () => log(`disconnect (${url})`))\n  }\n}\n\n/**\n * @extends Observable<string>\n */\nexport class WebrtcProvider extends Observable {\n  /**\n   * @param {string} roomName\n   * @param {Y.Doc} doc\n   * @param {Object} [opts]\n   * @param {Array<string>?} [opts.signaling]\n   * @param {string?} [opts.password]\n   * @param {awarenessProtocol.Awareness?} [opts.awareness]\n   * @param {number?} [opts.maxConns]\n   * @param {boolean?} [opts.filterBcConns]\n   * @param {any?} [opts.peerOpts]\n   */\n  constructor (\n    roomName,\n    doc,\n    {\n      signaling = ['wss://signaling.yjs.dev', 'wss://y-webrtc-signaling-eu.herokuapp.com', 'wss://y-webrtc-signaling-us.herokuapp.com'],\n      password = null,\n      awareness = new awarenessProtocol.Awareness(doc),\n      maxConns = 20 + math.floor(random.rand() * 15), // the random factor reduces the chance that n clients form a cluster\n      filterBcConns = true,\n      peerOpts = {} // simple-peer options. See https://github.com/feross/simple-peer#peer--new-peeropts\n    } = {}\n  ) {\n    super()\n    this.roomName = roomName\n    this.doc = doc\n    this.filterBcConns = filterBcConns\n    /**\n     * @type {awarenessProtocol.Awareness}\n     */\n    this.awareness = awareness\n    this.shouldConnect = false\n    this.signalingUrls = signaling\n    this.signalingConns = []\n    this.maxConns = maxConns\n    this.peerOpts = peerOpts\n    /**\n     * @type {PromiseLike<CryptoKey | null>}\n     */\n    this.key = password ? cryptoutils.deriveKey(password, roomName) : /** @type {PromiseLike<null>} */ (promise.resolve(null))\n    /**\n     * @type {Room|null}\n     */\n    this.room = null\n    this.key.then(key => {\n      this.room = openRoom(doc, this, roomName, key)\n      if (this.shouldConnect) {\n        this.room.connect()\n      } else {\n        this.room.disconnect()\n      }\n    })\n    this.connect()\n    this.destroy = this.destroy.bind(this)\n    doc.on('destroy', this.destroy)\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get connected () {\n    return this.room !== null && this.shouldConnect\n  }\n\n  connect () {\n    this.shouldConnect = true\n    this.signalingUrls.forEach(url => {\n      const signalingConn = map.setIfUndefined(signalingConns, url, () => new SignalingConn(url))\n      this.signalingConns.push(signalingConn)\n      signalingConn.providers.add(this)\n    })\n    if (this.room) {\n      this.room.connect()\n    }\n  }\n\n  disconnect () {\n    this.shouldConnect = false\n    this.signalingConns.forEach(conn => {\n      conn.providers.delete(this)\n      if (conn.providers.size === 0) {\n        conn.destroy()\n        signalingConns.delete(conn.url)\n      }\n    })\n    if (this.room) {\n      this.room.disconnect()\n    }\n  }\n\n  destroy () {\n    this.doc.off('destroy', this.destroy)\n    // need to wait for key before deleting room\n    this.key.then(() => {\n      /** @type {Room} */ (this.room).destroy()\n      rooms.delete(this.roomName)\n    })\n    super.destroy()\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}