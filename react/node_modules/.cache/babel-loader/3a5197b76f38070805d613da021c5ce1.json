{"ast":null,"code":"/* eslint-env browser */\nimport * as encoding from 'lib0/encoding';\nimport * as decoding from 'lib0/decoding';\nimport * as promise from 'lib0/promise';\nimport * as error from 'lib0/error';\nimport * as string from 'lib0/string';\n/**\n * @param {string} secret\n * @param {string} roomName\n * @return {PromiseLike<CryptoKey>}\n */\n\nexport const deriveKey = (secret, roomName) => {\n  const secretBuffer = string.encodeUtf8(secret).buffer;\n  const salt = string.encodeUtf8(roomName).buffer;\n  return crypto.subtle.importKey('raw', secretBuffer, 'PBKDF2', false, ['deriveKey']).then(keyMaterial => crypto.subtle.deriveKey({\n    name: 'PBKDF2',\n    salt,\n    iterations: 100000,\n    hash: 'SHA-256'\n  }, keyMaterial, {\n    name: 'AES-GCM',\n    length: 256\n  }, true, ['encrypt', 'decrypt']));\n};\n/**\n * @param {Uint8Array} data data to be encrypted\n * @param {CryptoKey?} key\n * @return {PromiseLike<Uint8Array>} encrypted, base64 encoded message\n */\n\nexport const encrypt = (data, key) => {\n  if (!key) {\n    return (\n      /** @type {PromiseLike<Uint8Array>} */\n      promise.resolve(data)\n    );\n  }\n\n  const iv = crypto.getRandomValues(new Uint8Array(12));\n  return crypto.subtle.encrypt({\n    name: 'AES-GCM',\n    iv\n  }, key, data).then(cipher => {\n    const encryptedDataEncoder = encoding.createEncoder();\n    encoding.writeVarString(encryptedDataEncoder, 'AES-GCM');\n    encoding.writeVarUint8Array(encryptedDataEncoder, iv);\n    encoding.writeVarUint8Array(encryptedDataEncoder, new Uint8Array(cipher));\n    return encoding.toUint8Array(encryptedDataEncoder);\n  });\n};\n/**\n * @param {Object} data data to be encrypted\n * @param {CryptoKey?} key\n * @return {PromiseLike<Uint8Array>} encrypted data, if key is provided\n */\n\nexport const encryptJson = (data, key) => {\n  const dataEncoder = encoding.createEncoder();\n  encoding.writeAny(dataEncoder, data);\n  return encrypt(encoding.toUint8Array(dataEncoder), key);\n};\n/**\n * @param {Uint8Array} data\n * @param {CryptoKey?} key\n * @return {PromiseLike<Uint8Array>} decrypted buffer\n */\n\nexport const decrypt = (data, key) => {\n  if (!key) {\n    return (\n      /** @type {PromiseLike<Uint8Array>} */\n      promise.resolve(data)\n    );\n  }\n\n  const dataDecoder = decoding.createDecoder(data);\n  const algorithm = decoding.readVarString(dataDecoder);\n\n  if (algorithm !== 'AES-GCM') {\n    promise.reject(error.create('Unknown encryption algorithm'));\n  }\n\n  const iv = decoding.readVarUint8Array(dataDecoder);\n  const cipher = decoding.readVarUint8Array(dataDecoder);\n  return crypto.subtle.decrypt({\n    name: 'AES-GCM',\n    iv\n  }, key, cipher).then(data => new Uint8Array(data));\n};\n/**\n * @param {Uint8Array} data\n * @param {CryptoKey?} key\n * @return {PromiseLike<Object>} decrypted object\n */\n\nexport const decryptJson = (data, key) => decrypt(data, key).then(decryptedValue => decoding.readAny(decoding.createDecoder(new Uint8Array(decryptedValue))));","map":{"version":3,"names":["encoding","decoding","promise","error","string","deriveKey","secret","roomName","secretBuffer","encodeUtf8","buffer","salt","crypto","subtle","importKey","then","keyMaterial","name","iterations","hash","length","encrypt","data","key","resolve","iv","getRandomValues","Uint8Array","cipher","encryptedDataEncoder","createEncoder","writeVarString","writeVarUint8Array","toUint8Array","encryptJson","dataEncoder","writeAny","decrypt","dataDecoder","createDecoder","algorithm","readVarString","reject","create","readVarUint8Array","decryptJson","decryptedValue","readAny"],"sources":["/Users/kuldeepupreti/Downloads/Projects/personal/yjs/node_modules/y-webrtc/src/crypto.js"],"sourcesContent":["/* eslint-env browser */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as promise from 'lib0/promise'\nimport * as error from 'lib0/error'\nimport * as string from 'lib0/string'\n\n/**\n * @param {string} secret\n * @param {string} roomName\n * @return {PromiseLike<CryptoKey>}\n */\nexport const deriveKey = (secret, roomName) => {\n  const secretBuffer = string.encodeUtf8(secret).buffer\n  const salt = string.encodeUtf8(roomName).buffer\n  return crypto.subtle.importKey(\n    'raw',\n    secretBuffer,\n    'PBKDF2',\n    false,\n    ['deriveKey']\n  ).then(keyMaterial =>\n    crypto.subtle.deriveKey(\n      {\n        name: 'PBKDF2',\n        salt,\n        iterations: 100000,\n        hash: 'SHA-256'\n      },\n      keyMaterial,\n      {\n        name: 'AES-GCM',\n        length: 256\n      },\n      true,\n      ['encrypt', 'decrypt']\n    )\n  )\n}\n\n/**\n * @param {Uint8Array} data data to be encrypted\n * @param {CryptoKey?} key\n * @return {PromiseLike<Uint8Array>} encrypted, base64 encoded message\n */\nexport const encrypt = (data, key) => {\n  if (!key) {\n    return /** @type {PromiseLike<Uint8Array>} */ (promise.resolve(data))\n  }\n  const iv = crypto.getRandomValues(new Uint8Array(12))\n  return crypto.subtle.encrypt(\n    {\n      name: 'AES-GCM',\n      iv\n    },\n    key,\n    data\n  ).then(cipher => {\n    const encryptedDataEncoder = encoding.createEncoder()\n    encoding.writeVarString(encryptedDataEncoder, 'AES-GCM')\n    encoding.writeVarUint8Array(encryptedDataEncoder, iv)\n    encoding.writeVarUint8Array(encryptedDataEncoder, new Uint8Array(cipher))\n    return encoding.toUint8Array(encryptedDataEncoder)\n  })\n}\n\n/**\n * @param {Object} data data to be encrypted\n * @param {CryptoKey?} key\n * @return {PromiseLike<Uint8Array>} encrypted data, if key is provided\n */\nexport const encryptJson = (data, key) => {\n  const dataEncoder = encoding.createEncoder()\n  encoding.writeAny(dataEncoder, data)\n  return encrypt(encoding.toUint8Array(dataEncoder), key)\n}\n\n/**\n * @param {Uint8Array} data\n * @param {CryptoKey?} key\n * @return {PromiseLike<Uint8Array>} decrypted buffer\n */\nexport const decrypt = (data, key) => {\n  if (!key) {\n    return /** @type {PromiseLike<Uint8Array>} */ (promise.resolve(data))\n  }\n  const dataDecoder = decoding.createDecoder(data)\n  const algorithm = decoding.readVarString(dataDecoder)\n  if (algorithm !== 'AES-GCM') {\n    promise.reject(error.create('Unknown encryption algorithm'))\n  }\n  const iv = decoding.readVarUint8Array(dataDecoder)\n  const cipher = decoding.readVarUint8Array(dataDecoder)\n  return crypto.subtle.decrypt(\n    {\n      name: 'AES-GCM',\n      iv\n    },\n    key,\n    cipher\n  ).then(data => new Uint8Array(data))\n}\n\n/**\n * @param {Uint8Array} data\n * @param {CryptoKey?} key\n * @return {PromiseLike<Object>} decrypted object\n */\nexport const decryptJson = (data, key) =>\n  decrypt(data, key).then(decryptedValue =>\n    decoding.readAny(decoding.createDecoder(new Uint8Array(decryptedValue)))\n  )\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}