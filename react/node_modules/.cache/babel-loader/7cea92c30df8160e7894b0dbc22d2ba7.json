{"ast":null,"code":"/**\n * @module awareness-protocol\n */\nimport * as encoding from 'lib0/encoding';\nimport * as decoding from 'lib0/decoding';\nimport * as time from 'lib0/time';\nimport * as math from 'lib0/math';\nimport { Observable } from 'lib0/observable';\nimport * as f from 'lib0/function';\nimport * as Y from 'yjs'; // eslint-disable-line\n\nexport const outdatedTimeout = 30000;\n/**\n * @typedef {Object} MetaClientState\n * @property {number} MetaClientState.clock\n * @property {number} MetaClientState.lastUpdated unix timestamp\n */\n\n/**\n * The Awareness class implements a simple shared state protocol that can be used for non-persistent data like awareness information\n * (cursor, username, status, ..). Each client can update its own local state and listen to state changes of\n * remote clients. Every client may set a state of a remote peer to `null` to mark the client as offline.\n *\n * Each client is identified by a unique client id (something we borrow from `doc.clientID`). A client can override\n * its own state by propagating a message with an increasing timestamp (`clock`). If such a message is received, it is\n * applied if the known state of that client is older than the new state (`clock < newClock`). If a client thinks that\n * a remote client is offline, it may propagate a message with\n * `{ clock: currentClientClock, state: null, client: remoteClient }`. If such a\n * message is received, and the known clock of that client equals the received clock, it will override the state with `null`.\n *\n * Before a client disconnects, it should propagate a `null` state with an updated clock.\n *\n * Awareness states must be updated every 30 seconds. Otherwise the Awareness instance will delete the client state.\n *\n * @extends {Observable<string>}\n */\n\nexport class Awareness extends Observable {\n  /**\n   * @param {Y.Doc} doc\n   */\n  constructor(doc) {\n    super();\n    this.doc = doc;\n    /**\n     * @type {number}\n     */\n\n    this.clientID = doc.clientID;\n    /**\n     * Maps from client id to client state\n     * @type {Map<number, Object<string, any>>}\n     */\n\n    this.states = new Map();\n    /**\n     * @type {Map<number, MetaClientState>}\n     */\n\n    this.meta = new Map();\n    this._checkInterval =\n    /** @type {any} */\n    setInterval(() => {\n      const now = time.getUnixTime();\n\n      if (this.getLocalState() !== null && outdatedTimeout / 2 <= now -\n      /** @type {{lastUpdated:number}} */\n      this.meta.get(this.clientID).lastUpdated) {\n        // renew local clock\n        this.setLocalState(this.getLocalState());\n      }\n      /**\n       * @type {Array<number>}\n       */\n\n\n      const remove = [];\n      this.meta.forEach((meta, clientid) => {\n        if (clientid !== this.clientID && outdatedTimeout <= now - meta.lastUpdated && this.states.has(clientid)) {\n          remove.push(clientid);\n        }\n      });\n\n      if (remove.length > 0) {\n        removeAwarenessStates(this, remove, 'timeout');\n      }\n    }, math.floor(outdatedTimeout / 10));\n    doc.on('destroy', () => {\n      this.destroy();\n    });\n    this.setLocalState({});\n  }\n\n  destroy() {\n    this.emit('destroy', [this]);\n    this.setLocalState(null);\n    super.destroy();\n    clearInterval(this._checkInterval);\n  }\n  /**\n   * @return {Object<string,any>|null}\n   */\n\n\n  getLocalState() {\n    return this.states.get(this.clientID) || null;\n  }\n  /**\n   * @param {Object<string,any>|null} state\n   */\n\n\n  setLocalState(state) {\n    const clientID = this.clientID;\n    const currLocalMeta = this.meta.get(clientID);\n    const clock = currLocalMeta === undefined ? 0 : currLocalMeta.clock + 1;\n    const prevState = this.states.get(clientID);\n\n    if (state === null) {\n      this.states.delete(clientID);\n    } else {\n      this.states.set(clientID, state);\n    }\n\n    this.meta.set(clientID, {\n      clock,\n      lastUpdated: time.getUnixTime()\n    });\n    const added = [];\n    const updated = [];\n    const filteredUpdated = [];\n    const removed = [];\n\n    if (state === null) {\n      removed.push(clientID);\n    } else if (prevState == null) {\n      if (state != null) {\n        added.push(clientID);\n      }\n    } else {\n      updated.push(clientID);\n\n      if (!f.equalityDeep(prevState, state)) {\n        filteredUpdated.push(clientID);\n      }\n    }\n\n    if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n      this.emit('change', [{\n        added,\n        updated: filteredUpdated,\n        removed\n      }, 'local']);\n    }\n\n    this.emit('update', [{\n      added,\n      updated,\n      removed\n    }, 'local']);\n  }\n  /**\n   * @param {string} field\n   * @param {any} value\n   */\n\n\n  setLocalStateField(field, value) {\n    const state = this.getLocalState();\n\n    if (state !== null) {\n      this.setLocalState({ ...state,\n        [field]: value\n      });\n    }\n  }\n  /**\n   * @return {Map<number,Object<string,any>>}\n   */\n\n\n  getStates() {\n    return this.states;\n  }\n\n}\n/**\n * Mark (remote) clients as inactive and remove them from the list of active peers.\n * This change will be propagated to remote clients.\n *\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @param {any} origin\n */\n\nexport const removeAwarenessStates = (awareness, clients, origin) => {\n  const removed = [];\n\n  for (let i = 0; i < clients.length; i++) {\n    const clientID = clients[i];\n\n    if (awareness.states.has(clientID)) {\n      awareness.states.delete(clientID);\n\n      if (clientID === awareness.clientID) {\n        const curMeta =\n        /** @type {MetaClientState} */\n        awareness.meta.get(clientID);\n        awareness.meta.set(clientID, {\n          clock: curMeta.clock + 1,\n          lastUpdated: time.getUnixTime()\n        });\n      }\n\n      removed.push(clientID);\n    }\n  }\n\n  if (removed.length > 0) {\n    awareness.emit('change', [{\n      added: [],\n      updated: [],\n      removed\n    }, origin]);\n    awareness.emit('update', [{\n      added: [],\n      updated: [],\n      removed\n    }, origin]);\n  }\n};\n/**\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @return {Uint8Array}\n */\n\nexport const encodeAwarenessUpdate = function (awareness, clients) {\n  let states = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : awareness.states;\n  const len = clients.length;\n  const encoder = encoding.createEncoder();\n  encoding.writeVarUint(encoder, len);\n\n  for (let i = 0; i < len; i++) {\n    const clientID = clients[i];\n    const state = states.get(clientID) || null;\n    const clock =\n    /** @type {MetaClientState} */\n    awareness.meta.get(clientID).clock;\n    encoding.writeVarUint(encoder, clientID);\n    encoding.writeVarUint(encoder, clock);\n    encoding.writeVarString(encoder, JSON.stringify(state));\n  }\n\n  return encoding.toUint8Array(encoder);\n};\n/**\n * Modify the content of an awareness update before re-encoding it to an awareness update.\n *\n * This might be useful when you have a central server that wants to ensure that clients\n * cant hijack somebody elses identity.\n *\n * @param {Uint8Array} update\n * @param {function(any):any} modify\n * @return {Uint8Array}\n */\n\nexport const modifyAwarenessUpdate = (update, modify) => {\n  const decoder = decoding.createDecoder(update);\n  const encoder = encoding.createEncoder();\n  const len = decoding.readVarUint(decoder);\n  encoding.writeVarUint(encoder, len);\n\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder);\n    const clock = decoding.readVarUint(decoder);\n    const state = JSON.parse(decoding.readVarString(decoder));\n    const modifiedState = modify(state);\n    encoding.writeVarUint(encoder, clientID);\n    encoding.writeVarUint(encoder, clock);\n    encoding.writeVarString(encoder, JSON.stringify(modifiedState));\n  }\n\n  return encoding.toUint8Array(encoder);\n};\n/**\n * @param {Awareness} awareness\n * @param {Uint8Array} update\n * @param {any} origin This will be added to the emitted change event\n */\n\nexport const applyAwarenessUpdate = (awareness, update, origin) => {\n  const decoder = decoding.createDecoder(update);\n  const timestamp = time.getUnixTime();\n  const added = [];\n  const updated = [];\n  const filteredUpdated = [];\n  const removed = [];\n  const len = decoding.readVarUint(decoder);\n\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder);\n    let clock = decoding.readVarUint(decoder);\n    const state = JSON.parse(decoding.readVarString(decoder));\n    const clientMeta = awareness.meta.get(clientID);\n    const prevState = awareness.states.get(clientID);\n    const currClock = clientMeta === undefined ? 0 : clientMeta.clock;\n\n    if (currClock < clock || currClock === clock && state === null && awareness.states.has(clientID)) {\n      if (state === null) {\n        // never let a remote client remove this local state\n        if (clientID === awareness.clientID && awareness.getLocalState() != null) {\n          // remote client removed the local state. Do not remote state. Broadcast a message indicating\n          // that this client still exists by increasing the clock\n          clock++;\n        } else {\n          awareness.states.delete(clientID);\n        }\n      } else {\n        awareness.states.set(clientID, state);\n      }\n\n      awareness.meta.set(clientID, {\n        clock,\n        lastUpdated: timestamp\n      });\n\n      if (clientMeta === undefined && state !== null) {\n        added.push(clientID);\n      } else if (clientMeta !== undefined && state === null) {\n        removed.push(clientID);\n      } else if (state !== null) {\n        if (!f.equalityDeep(state, prevState)) {\n          filteredUpdated.push(clientID);\n        }\n\n        updated.push(clientID);\n      }\n    }\n  }\n\n  if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n    awareness.emit('change', [{\n      added,\n      updated: filteredUpdated,\n      removed\n    }, origin]);\n  }\n\n  if (added.length > 0 || updated.length > 0 || removed.length > 0) {\n    awareness.emit('update', [{\n      added,\n      updated,\n      removed\n    }, origin]);\n  }\n};","map":{"version":3,"names":["encoding","decoding","time","math","Observable","f","Y","outdatedTimeout","Awareness","constructor","doc","clientID","states","Map","meta","_checkInterval","setInterval","now","getUnixTime","getLocalState","get","lastUpdated","setLocalState","remove","forEach","clientid","has","push","length","removeAwarenessStates","floor","on","destroy","emit","clearInterval","state","currLocalMeta","clock","undefined","prevState","delete","set","added","updated","filteredUpdated","removed","equalityDeep","setLocalStateField","field","value","getStates","awareness","clients","origin","i","curMeta","encodeAwarenessUpdate","len","encoder","createEncoder","writeVarUint","writeVarString","JSON","stringify","toUint8Array","modifyAwarenessUpdate","update","modify","decoder","createDecoder","readVarUint","parse","readVarString","modifiedState","applyAwarenessUpdate","timestamp","clientMeta","currClock"],"sources":["/Users/kuldeepupreti/Downloads/Projects/personal/yjs/node_modules/y-protocols/awareness.js"],"sourcesContent":["/**\n * @module awareness-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as time from 'lib0/time'\nimport * as math from 'lib0/math'\nimport { Observable } from 'lib0/observable'\nimport * as f from 'lib0/function'\nimport * as Y from 'yjs' // eslint-disable-line\n\nexport const outdatedTimeout = 30000\n\n/**\n * @typedef {Object} MetaClientState\n * @property {number} MetaClientState.clock\n * @property {number} MetaClientState.lastUpdated unix timestamp\n */\n\n/**\n * The Awareness class implements a simple shared state protocol that can be used for non-persistent data like awareness information\n * (cursor, username, status, ..). Each client can update its own local state and listen to state changes of\n * remote clients. Every client may set a state of a remote peer to `null` to mark the client as offline.\n *\n * Each client is identified by a unique client id (something we borrow from `doc.clientID`). A client can override\n * its own state by propagating a message with an increasing timestamp (`clock`). If such a message is received, it is\n * applied if the known state of that client is older than the new state (`clock < newClock`). If a client thinks that\n * a remote client is offline, it may propagate a message with\n * `{ clock: currentClientClock, state: null, client: remoteClient }`. If such a\n * message is received, and the known clock of that client equals the received clock, it will override the state with `null`.\n *\n * Before a client disconnects, it should propagate a `null` state with an updated clock.\n *\n * Awareness states must be updated every 30 seconds. Otherwise the Awareness instance will delete the client state.\n *\n * @extends {Observable<string>}\n */\nexport class Awareness extends Observable {\n  /**\n   * @param {Y.Doc} doc\n   */\n  constructor (doc) {\n    super()\n    this.doc = doc\n    /**\n     * @type {number}\n     */\n    this.clientID = doc.clientID\n    /**\n     * Maps from client id to client state\n     * @type {Map<number, Object<string, any>>}\n     */\n    this.states = new Map()\n    /**\n     * @type {Map<number, MetaClientState>}\n     */\n    this.meta = new Map()\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      const now = time.getUnixTime()\n      if (this.getLocalState() !== null && (outdatedTimeout / 2 <= now - /** @type {{lastUpdated:number}} */ (this.meta.get(this.clientID)).lastUpdated)) {\n        // renew local clock\n        this.setLocalState(this.getLocalState())\n      }\n      /**\n       * @type {Array<number>}\n       */\n      const remove = []\n      this.meta.forEach((meta, clientid) => {\n        if (clientid !== this.clientID && outdatedTimeout <= now - meta.lastUpdated && this.states.has(clientid)) {\n          remove.push(clientid)\n        }\n      })\n      if (remove.length > 0) {\n        removeAwarenessStates(this, remove, 'timeout')\n      }\n    }, math.floor(outdatedTimeout / 10)))\n    doc.on('destroy', () => {\n      this.destroy()\n    })\n    this.setLocalState({})\n  }\n\n  destroy () {\n    this.emit('destroy', [this])\n    this.setLocalState(null)\n    super.destroy()\n    clearInterval(this._checkInterval)\n  }\n\n  /**\n   * @return {Object<string,any>|null}\n   */\n  getLocalState () {\n    return this.states.get(this.clientID) || null\n  }\n\n  /**\n   * @param {Object<string,any>|null} state\n   */\n  setLocalState (state) {\n    const clientID = this.clientID\n    const currLocalMeta = this.meta.get(clientID)\n    const clock = currLocalMeta === undefined ? 0 : currLocalMeta.clock + 1\n    const prevState = this.states.get(clientID)\n    if (state === null) {\n      this.states.delete(clientID)\n    } else {\n      this.states.set(clientID, state)\n    }\n    this.meta.set(clientID, {\n      clock,\n      lastUpdated: time.getUnixTime()\n    })\n    const added = []\n    const updated = []\n    const filteredUpdated = []\n    const removed = []\n    if (state === null) {\n      removed.push(clientID)\n    } else if (prevState == null) {\n      if (state != null) {\n        added.push(clientID)\n      }\n    } else {\n      updated.push(clientID)\n      if (!f.equalityDeep(prevState, state)) {\n        filteredUpdated.push(clientID)\n      }\n    }\n    if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n      this.emit('change', [{ added, updated: filteredUpdated, removed }, 'local'])\n    }\n    this.emit('update', [{ added, updated, removed }, 'local'])\n  }\n\n  /**\n   * @param {string} field\n   * @param {any} value\n   */\n  setLocalStateField (field, value) {\n    const state = this.getLocalState()\n    if (state !== null) {\n      this.setLocalState({\n        ...state,\n        [field]: value\n      })\n    }\n  }\n\n  /**\n   * @return {Map<number,Object<string,any>>}\n   */\n  getStates () {\n    return this.states\n  }\n}\n\n/**\n * Mark (remote) clients as inactive and remove them from the list of active peers.\n * This change will be propagated to remote clients.\n *\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @param {any} origin\n */\nexport const removeAwarenessStates = (awareness, clients, origin) => {\n  const removed = []\n  for (let i = 0; i < clients.length; i++) {\n    const clientID = clients[i]\n    if (awareness.states.has(clientID)) {\n      awareness.states.delete(clientID)\n      if (clientID === awareness.clientID) {\n        const curMeta = /** @type {MetaClientState} */ (awareness.meta.get(clientID))\n        awareness.meta.set(clientID, {\n          clock: curMeta.clock + 1,\n          lastUpdated: time.getUnixTime()\n        })\n      }\n      removed.push(clientID)\n    }\n  }\n  if (removed.length > 0) {\n    awareness.emit('change', [{ added: [], updated: [], removed }, origin])\n    awareness.emit('update', [{ added: [], updated: [], removed }, origin])\n  }\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @return {Uint8Array}\n */\nexport const encodeAwarenessUpdate = (awareness, clients, states = awareness.states) => {\n  const len = clients.length\n  const encoder = encoding.createEncoder()\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = clients[i]\n    const state = states.get(clientID) || null\n    const clock = /** @type {MetaClientState} */ (awareness.meta.get(clientID)).clock\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(state))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * Modify the content of an awareness update before re-encoding it to an awareness update.\n *\n * This might be useful when you have a central server that wants to ensure that clients\n * cant hijack somebody elses identity.\n *\n * @param {Uint8Array} update\n * @param {function(any):any} modify\n * @return {Uint8Array}\n */\nexport const modifyAwarenessUpdate = (update, modify) => {\n  const decoder = decoding.createDecoder(update)\n  const encoder = encoding.createEncoder()\n  const len = decoding.readVarUint(decoder)\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    const clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const modifiedState = modify(state)\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(modifiedState))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Uint8Array} update\n * @param {any} origin This will be added to the emitted change event\n */\nexport const applyAwarenessUpdate = (awareness, update, origin) => {\n  const decoder = decoding.createDecoder(update)\n  const timestamp = time.getUnixTime()\n  const added = []\n  const updated = []\n  const filteredUpdated = []\n  const removed = []\n  const len = decoding.readVarUint(decoder)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    let clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const clientMeta = awareness.meta.get(clientID)\n    const prevState = awareness.states.get(clientID)\n    const currClock = clientMeta === undefined ? 0 : clientMeta.clock\n    if (currClock < clock || (currClock === clock && state === null && awareness.states.has(clientID))) {\n      if (state === null) {\n        // never let a remote client remove this local state\n        if (clientID === awareness.clientID && awareness.getLocalState() != null) {\n          // remote client removed the local state. Do not remote state. Broadcast a message indicating\n          // that this client still exists by increasing the clock\n          clock++\n        } else {\n          awareness.states.delete(clientID)\n        }\n      } else {\n        awareness.states.set(clientID, state)\n      }\n      awareness.meta.set(clientID, {\n        clock,\n        lastUpdated: timestamp\n      })\n      if (clientMeta === undefined && state !== null) {\n        added.push(clientID)\n      } else if (clientMeta !== undefined && state === null) {\n        removed.push(clientID)\n      } else if (state !== null) {\n        if (!f.equalityDeep(state, prevState)) {\n          filteredUpdated.push(clientID)\n        }\n        updated.push(clientID)\n      }\n    }\n  }\n  if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n    awareness.emit('change', [{\n      added, updated: filteredUpdated, removed\n    }, origin])\n  }\n  if (added.length > 0 || updated.length > 0 || removed.length > 0) {\n    awareness.emit('update', [{\n      added, updated, removed\n    }, origin])\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}