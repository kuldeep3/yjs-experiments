{"ast":null,"code":"/**\n * Utility module to convert metric values.\n *\n * @module metric\n */\nimport * as math from './math.js';\nexport const yotta = 1e24;\nexport const zetta = 1e21;\nexport const exa = 1e18;\nexport const peta = 1e15;\nexport const tera = 1e12;\nexport const giga = 1e9;\nexport const mega = 1e6;\nexport const kilo = 1e3;\nexport const hecto = 1e2;\nexport const deca = 10;\nexport const deci = 0.1;\nexport const centi = 0.01;\nexport const milli = 1e-3;\nexport const micro = 1e-6;\nexport const nano = 1e-9;\nexport const pico = 1e-12;\nexport const femto = 1e-15;\nexport const atto = 1e-18;\nexport const zepto = 1e-21;\nexport const yocto = 1e-24;\nconst prefixUp = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\nconst prefixDown = ['', 'm', 'μ', 'n', 'p', 'f', 'a', 'z', 'y'];\n/**\n * Calculate the metric prefix for a number. Assumes E.g. `prefix(1000) = { n: 1, prefix: 'k' }`\n *\n * @param {number} n\n * @param {number} [baseMultiplier] Multiplier of the base (10^(3*baseMultiplier)). E.g. `convert(time, -3)` if time is already in milli seconds\n * @return {{n:number,prefix:string}}\n */\n\nexport const prefix = function (n) {\n  let baseMultiplier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const nPow = n === 0 ? 0 : math.log10(n);\n  let mult = 0;\n\n  while (nPow < mult * 3 && baseMultiplier > -8) {\n    baseMultiplier--;\n    mult--;\n  }\n\n  while (nPow >= 3 + mult * 3 && baseMultiplier < 8) {\n    baseMultiplier++;\n    mult++;\n  }\n\n  const prefix = baseMultiplier < 0 ? prefixDown[-baseMultiplier] : prefixUp[baseMultiplier];\n  return {\n    n: math.round((mult > 0 ? n / math.exp10(mult * 3) : n * math.exp10(mult * -3)) * 1e12) / 1e12,\n    prefix\n  };\n};","map":{"version":3,"names":["math","yotta","zetta","exa","peta","tera","giga","mega","kilo","hecto","deca","deci","centi","milli","micro","nano","pico","femto","atto","zepto","yocto","prefixUp","prefixDown","prefix","n","baseMultiplier","nPow","log10","mult","round","exp10"],"sources":["/Users/kuldeepupreti/Downloads/Projects/personal/yjs/node_modules/lib0/metric.js"],"sourcesContent":["/**\n * Utility module to convert metric values.\n *\n * @module metric\n */\n\nimport * as math from './math.js'\n\nexport const yotta = 1e24\nexport const zetta = 1e21\nexport const exa = 1e18\nexport const peta = 1e15\nexport const tera = 1e12\nexport const giga = 1e9\nexport const mega = 1e6\nexport const kilo = 1e3\nexport const hecto = 1e2\nexport const deca = 10\nexport const deci = 0.1\nexport const centi = 0.01\nexport const milli = 1e-3\nexport const micro = 1e-6\nexport const nano = 1e-9\nexport const pico = 1e-12\nexport const femto = 1e-15\nexport const atto = 1e-18\nexport const zepto = 1e-21\nexport const yocto = 1e-24\n\nconst prefixUp = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']\nconst prefixDown = ['', 'm', 'μ', 'n', 'p', 'f', 'a', 'z', 'y']\n\n/**\n * Calculate the metric prefix for a number. Assumes E.g. `prefix(1000) = { n: 1, prefix: 'k' }`\n *\n * @param {number} n\n * @param {number} [baseMultiplier] Multiplier of the base (10^(3*baseMultiplier)). E.g. `convert(time, -3)` if time is already in milli seconds\n * @return {{n:number,prefix:string}}\n */\nexport const prefix = (n, baseMultiplier = 0) => {\n  const nPow = n === 0 ? 0 : math.log10(n)\n  let mult = 0\n  while (nPow < mult * 3 && baseMultiplier > -8) {\n    baseMultiplier--\n    mult--\n  }\n  while (nPow >= 3 + mult * 3 && baseMultiplier < 8) {\n    baseMultiplier++\n    mult++\n  }\n  const prefix = baseMultiplier < 0 ? prefixDown[-baseMultiplier] : prefixUp[baseMultiplier]\n  return {\n    n: math.round((mult > 0 ? n / math.exp10(mult * 3) : n * math.exp10(mult * -3)) * 1e12) / 1e12,\n    prefix\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,OAAO,KAAKA,IAAZ,MAAsB,WAAtB;AAEA,OAAO,MAAMC,KAAK,GAAG,IAAd;AACP,OAAO,MAAMC,KAAK,GAAG,IAAd;AACP,OAAO,MAAMC,GAAG,GAAG,IAAZ;AACP,OAAO,MAAMC,IAAI,GAAG,IAAb;AACP,OAAO,MAAMC,IAAI,GAAG,IAAb;AACP,OAAO,MAAMC,IAAI,GAAG,GAAb;AACP,OAAO,MAAMC,IAAI,GAAG,GAAb;AACP,OAAO,MAAMC,IAAI,GAAG,GAAb;AACP,OAAO,MAAMC,KAAK,GAAG,GAAd;AACP,OAAO,MAAMC,IAAI,GAAG,EAAb;AACP,OAAO,MAAMC,IAAI,GAAG,GAAb;AACP,OAAO,MAAMC,KAAK,GAAG,IAAd;AACP,OAAO,MAAMC,KAAK,GAAG,IAAd;AACP,OAAO,MAAMC,KAAK,GAAG,IAAd;AACP,OAAO,MAAMC,IAAI,GAAG,IAAb;AACP,OAAO,MAAMC,IAAI,GAAG,KAAb;AACP,OAAO,MAAMC,KAAK,GAAG,KAAd;AACP,OAAO,MAAMC,IAAI,GAAG,KAAb;AACP,OAAO,MAAMC,KAAK,GAAG,KAAd;AACP,OAAO,MAAMC,KAAK,GAAG,KAAd;AAEP,MAAMC,QAAQ,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,EAAwC,GAAxC,CAAjB;AACA,MAAMC,UAAU,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,EAAwC,GAAxC,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GAAG,UAACC,CAAD,EAA2B;EAAA,IAAvBC,cAAuB,uEAAN,CAAM;EAC/C,MAAMC,IAAI,GAAGF,CAAC,KAAK,CAAN,GAAU,CAAV,GAAcxB,IAAI,CAAC2B,KAAL,CAAWH,CAAX,CAA3B;EACA,IAAII,IAAI,GAAG,CAAX;;EACA,OAAOF,IAAI,GAAGE,IAAI,GAAG,CAAd,IAAmBH,cAAc,GAAG,CAAC,CAA5C,EAA+C;IAC7CA,cAAc;IACdG,IAAI;EACL;;EACD,OAAOF,IAAI,IAAI,IAAIE,IAAI,GAAG,CAAnB,IAAwBH,cAAc,GAAG,CAAhD,EAAmD;IACjDA,cAAc;IACdG,IAAI;EACL;;EACD,MAAML,MAAM,GAAGE,cAAc,GAAG,CAAjB,GAAqBH,UAAU,CAAC,CAACG,cAAF,CAA/B,GAAmDJ,QAAQ,CAACI,cAAD,CAA1E;EACA,OAAO;IACLD,CAAC,EAAExB,IAAI,CAAC6B,KAAL,CAAW,CAACD,IAAI,GAAG,CAAP,GAAWJ,CAAC,GAAGxB,IAAI,CAAC8B,KAAL,CAAWF,IAAI,GAAG,CAAlB,CAAf,GAAsCJ,CAAC,GAAGxB,IAAI,CAAC8B,KAAL,CAAWF,IAAI,GAAG,CAAC,CAAnB,CAA3C,IAAoE,IAA/E,IAAuF,IADrF;IAELL;EAFK,CAAP;AAID,CAhBM"},"metadata":{},"sourceType":"module"}