{"ast":null,"code":"/* eslint-env browser */\n\n/**\n * Helpers for cross-tab communication using broadcastchannel with LocalStorage fallback.\n *\n * ```js\n * // In browser window A:\n * broadcastchannel.subscribe('my events', data => console.log(data))\n * broadcastchannel.publish('my events', 'Hello world!') // => A: 'Hello world!' fires synchronously in same tab\n *\n * // In browser window B:\n * broadcastchannel.publish('my events', 'hello from tab B') // => A: 'hello from tab B'\n * ```\n *\n * @module broadcastchannel\n */\n// @todo before next major: use Uint8Array instead as buffer object\nimport * as map from './map.js';\nimport * as buffer from './buffer.js';\nimport * as storage from './storage.js';\n/**\n * @typedef {Object} Channel\n * @property {Set<function(any, any):any>} Channel.subs\n * @property {any} Channel.bc\n */\n\n/**\n * @type {Map<string, Channel>}\n */\n\nconst channels = new Map();\n\nclass LocalStoragePolyfill {\n  /**\n   * @param {string} room\n   */\n  constructor(room) {\n    this.room = room;\n    /**\n     * @type {null|function({data:ArrayBuffer}):void}\n     */\n\n    this.onmessage = null;\n    storage.onChange(e => e.key === room && this.onmessage !== null && this.onmessage({\n      data: buffer.fromBase64(e.newValue || '')\n    }));\n  }\n  /**\n   * @param {ArrayBuffer} buf\n   */\n\n\n  postMessage(buf) {\n    storage.varStorage.setItem(this.room, buffer.toBase64(buffer.createUint8ArrayFromArrayBuffer(buf)));\n  }\n\n} // Use BroadcastChannel or Polyfill\n\n\nconst BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel;\n/**\n * @param {string} room\n * @return {Channel}\n */\n\nconst getChannel = room => map.setIfUndefined(channels, room, () => {\n  const subs = new Set();\n  const bc = new BC(room);\n  /**\n   * @param {{data:ArrayBuffer}} e\n   */\n\n  bc.onmessage = e => subs.forEach(sub => sub(e.data, 'broadcastchannel'));\n\n  return {\n    bc,\n    subs\n  };\n});\n/**\n * Subscribe to global `publish` events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\n\n\nexport const subscribe = (room, f) => getChannel(room).subs.add(f);\n/**\n * Unsubscribe from `publish` global events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\n\nexport const unsubscribe = (room, f) => getChannel(room).subs.delete(f);\n/**\n * Publish data to all subscribers (including subscribers on this tab)\n *\n * @function\n * @param {string} room\n * @param {any} data\n * @param {any} [origin]\n */\n\nexport const publish = function (room, data) {\n  let origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  const c = getChannel(room);\n  c.bc.postMessage(data);\n  c.subs.forEach(sub => sub(data, origin));\n};","map":{"version":3,"names":["map","buffer","storage","channels","Map","LocalStoragePolyfill","constructor","room","onmessage","onChange","e","key","data","fromBase64","newValue","postMessage","buf","varStorage","setItem","toBase64","createUint8ArrayFromArrayBuffer","BC","BroadcastChannel","getChannel","setIfUndefined","subs","Set","bc","forEach","sub","subscribe","f","add","unsubscribe","delete","publish","origin","c"],"sources":["/Users/kuldeepupreti/Downloads/Projects/personal/yjs/node_modules/lib0/broadcastchannel.js"],"sourcesContent":["/* eslint-env browser */\n\n/**\n * Helpers for cross-tab communication using broadcastchannel with LocalStorage fallback.\n *\n * ```js\n * // In browser window A:\n * broadcastchannel.subscribe('my events', data => console.log(data))\n * broadcastchannel.publish('my events', 'Hello world!') // => A: 'Hello world!' fires synchronously in same tab\n *\n * // In browser window B:\n * broadcastchannel.publish('my events', 'hello from tab B') // => A: 'hello from tab B'\n * ```\n *\n * @module broadcastchannel\n */\n\n// @todo before next major: use Uint8Array instead as buffer object\n\nimport * as map from './map.js'\nimport * as buffer from './buffer.js'\nimport * as storage from './storage.js'\n\n/**\n * @typedef {Object} Channel\n * @property {Set<function(any, any):any>} Channel.subs\n * @property {any} Channel.bc\n */\n\n/**\n * @type {Map<string, Channel>}\n */\nconst channels = new Map()\n\nclass LocalStoragePolyfill {\n  /**\n   * @param {string} room\n   */\n  constructor (room) {\n    this.room = room\n    /**\n     * @type {null|function({data:ArrayBuffer}):void}\n     */\n    this.onmessage = null\n    storage.onChange(e => e.key === room && this.onmessage !== null && this.onmessage({ data: buffer.fromBase64(e.newValue || '') }))\n  }\n\n  /**\n   * @param {ArrayBuffer} buf\n   */\n  postMessage (buf) {\n    storage.varStorage.setItem(this.room, buffer.toBase64(buffer.createUint8ArrayFromArrayBuffer(buf)))\n  }\n}\n\n// Use BroadcastChannel or Polyfill\nconst BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel\n\n/**\n * @param {string} room\n * @return {Channel}\n */\nconst getChannel = room =>\n  map.setIfUndefined(channels, room, () => {\n    const subs = new Set()\n    const bc = new BC(room)\n    /**\n     * @param {{data:ArrayBuffer}} e\n     */\n    bc.onmessage = e => subs.forEach(sub => sub(e.data, 'broadcastchannel'))\n    return {\n      bc, subs\n    }\n  })\n\n/**\n * Subscribe to global `publish` events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\nexport const subscribe = (room, f) => getChannel(room).subs.add(f)\n\n/**\n * Unsubscribe from `publish` global events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\nexport const unsubscribe = (room, f) => getChannel(room).subs.delete(f)\n\n/**\n * Publish data to all subscribers (including subscribers on this tab)\n *\n * @function\n * @param {string} room\n * @param {any} data\n * @param {any} [origin]\n */\nexport const publish = (room, data, origin = null) => {\n  const c = getChannel(room)\n  c.bc.postMessage(data)\n  c.subs.forEach(sub => sub(data, origin))\n}\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAO,KAAKA,GAAZ,MAAqB,UAArB;AACA,OAAO,KAAKC,MAAZ,MAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;;AAEA,MAAMC,oBAAN,CAA2B;EACzB;AACF;AACA;EACEC,WAAW,CAAEC,IAAF,EAAQ;IACjB,KAAKA,IAAL,GAAYA,IAAZ;IACA;AACJ;AACA;;IACI,KAAKC,SAAL,GAAiB,IAAjB;IACAN,OAAO,CAACO,QAAR,CAAiBC,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUJ,IAAV,IAAkB,KAAKC,SAAL,KAAmB,IAArC,IAA6C,KAAKA,SAAL,CAAe;MAAEI,IAAI,EAAEX,MAAM,CAACY,UAAP,CAAkBH,CAAC,CAACI,QAAF,IAAc,EAAhC;IAAR,CAAf,CAAnE;EACD;EAED;AACF;AACA;;;EACEC,WAAW,CAAEC,GAAF,EAAO;IAChBd,OAAO,CAACe,UAAR,CAAmBC,OAAnB,CAA2B,KAAKX,IAAhC,EAAsCN,MAAM,CAACkB,QAAP,CAAgBlB,MAAM,CAACmB,+BAAP,CAAuCJ,GAAvC,CAAhB,CAAtC;EACD;;AAlBwB,C,CAqB3B;;;AACA,MAAMK,EAAE,GAAG,OAAOC,gBAAP,KAA4B,WAA5B,GAA0CjB,oBAA1C,GAAiEiB,gBAA5E;AAEA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAGhB,IAAI,IACrBP,GAAG,CAACwB,cAAJ,CAAmBrB,QAAnB,EAA6BI,IAA7B,EAAmC,MAAM;EACvC,MAAMkB,IAAI,GAAG,IAAIC,GAAJ,EAAb;EACA,MAAMC,EAAE,GAAG,IAAIN,EAAJ,CAAOd,IAAP,CAAX;EACA;AACJ;AACA;;EACIoB,EAAE,CAACnB,SAAH,GAAeE,CAAC,IAAIe,IAAI,CAACG,OAAL,CAAaC,GAAG,IAAIA,GAAG,CAACnB,CAAC,CAACE,IAAH,EAAS,kBAAT,CAAvB,CAApB;;EACA,OAAO;IACLe,EADK;IACDF;EADC,CAAP;AAGD,CAVD,CADF;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMK,SAAS,GAAG,CAACvB,IAAD,EAAOwB,CAAP,KAAaR,UAAU,CAAChB,IAAD,CAAV,CAAiBkB,IAAjB,CAAsBO,GAAtB,CAA0BD,CAA1B,CAA/B;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,WAAW,GAAG,CAAC1B,IAAD,EAAOwB,CAAP,KAAaR,UAAU,CAAChB,IAAD,CAAV,CAAiBkB,IAAjB,CAAsBS,MAAtB,CAA6BH,CAA7B,CAAjC;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,OAAO,GAAG,UAAC5B,IAAD,EAAOK,IAAP,EAA+B;EAAA,IAAlBwB,MAAkB,uEAAT,IAAS;EACpD,MAAMC,CAAC,GAAGd,UAAU,CAAChB,IAAD,CAApB;EACA8B,CAAC,CAACV,EAAF,CAAKZ,WAAL,CAAiBH,IAAjB;EACAyB,CAAC,CAACZ,IAAF,CAAOG,OAAP,CAAeC,GAAG,IAAIA,GAAG,CAACjB,IAAD,EAAOwB,MAAP,CAAzB;AACD,CAJM"},"metadata":{},"sourceType":"module"}