{"ast":null,"code":"/**\n * Efficient schema-less binary decoding with support for variable length encoding.\n *\n * Use [lib0/decoding] with [lib0/encoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = new encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = new decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module decoding\n */\nimport * as buffer from './buffer.js';\nimport * as binary from './binary.js';\nimport * as math from './math.js';\n/**\n * A Decoder handles the decoding of an Uint8Array.\n */\n\nexport class Decoder {\n  /**\n   * @param {Uint8Array} uint8Array Binary data to decode\n   */\n  constructor(uint8Array) {\n    /**\n     * Decoding target.\n     *\n     * @type {Uint8Array}\n     */\n    this.arr = uint8Array;\n    /**\n     * Current decoding position.\n     *\n     * @type {number}\n     */\n\n    this.pos = 0;\n  }\n\n}\n/**\n * @function\n * @param {Uint8Array} uint8Array\n * @return {Decoder}\n */\n\nexport const createDecoder = uint8Array => new Decoder(uint8Array);\n/**\n * @function\n * @param {Decoder} decoder\n * @return {boolean}\n */\n\nexport const hasContent = decoder => decoder.pos !== decoder.arr.length;\n/**\n * Clone a decoder instance.\n * Optionally set a new position parameter.\n *\n * @function\n * @param {Decoder} decoder The decoder instance\n * @param {number} [newPos] Defaults to current position\n * @return {Decoder} A clone of `decoder`\n */\n\nexport const clone = function (decoder) {\n  let newPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : decoder.pos;\n\n  const _decoder = createDecoder(decoder.arr);\n\n  _decoder.pos = newPos;\n  return _decoder;\n};\n/**\n * Create an Uint8Array view of the next `len` bytes and advance the position by `len`.\n *\n * Important: The Uint8Array still points to the underlying ArrayBuffer. Make sure to discard the result as soon as possible to prevent any memory leaks.\n *            Use `buffer.copyUint8Array` to copy the result into a new Uint8Array.\n *\n * @function\n * @param {Decoder} decoder The decoder instance\n * @param {number} len The length of bytes to read\n * @return {Uint8Array}\n */\n\nexport const readUint8Array = (decoder, len) => {\n  const view = buffer.createUint8ArrayViewFromArrayBuffer(decoder.arr.buffer, decoder.pos + decoder.arr.byteOffset, len);\n  decoder.pos += len;\n  return view;\n};\n/**\n * Read variable length Uint8Array.\n *\n * Important: The Uint8Array still points to the underlying ArrayBuffer. Make sure to discard the result as soon as possible to prevent any memory leaks.\n *            Use `buffer.copyUint8Array` to copy the result into a new Uint8Array.\n *\n * @function\n * @param {Decoder} decoder\n * @return {Uint8Array}\n */\n\nexport const readVarUint8Array = decoder => readUint8Array(decoder, readVarUint(decoder));\n/**\n * Read the rest of the content as an ArrayBuffer\n * @function\n * @param {Decoder} decoder\n * @return {Uint8Array}\n */\n\nexport const readTailAsUint8Array = decoder => readUint8Array(decoder, decoder.arr.length - decoder.pos);\n/**\n * Skip one byte, jump to the next position.\n * @function\n * @param {Decoder} decoder The decoder instance\n * @return {number} The next position\n */\n\nexport const skip8 = decoder => decoder.pos++;\n/**\n * Read one byte as unsigned integer.\n * @function\n * @param {Decoder} decoder The decoder instance\n * @return {number} Unsigned 8-bit integer\n */\n\nexport const readUint8 = decoder => decoder.arr[decoder.pos++];\n/**\n * Read 2 bytes as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\n\nexport const readUint16 = decoder => {\n  const uint = decoder.arr[decoder.pos] + (decoder.arr[decoder.pos + 1] << 8);\n  decoder.pos += 2;\n  return uint;\n};\n/**\n * Read 4 bytes as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\n\nexport const readUint32 = decoder => {\n  const uint = decoder.arr[decoder.pos] + (decoder.arr[decoder.pos + 1] << 8) + (decoder.arr[decoder.pos + 2] << 16) + (decoder.arr[decoder.pos + 3] << 24) >>> 0;\n  decoder.pos += 4;\n  return uint;\n};\n/**\n * Read 4 bytes as unsigned integer in big endian order.\n * (most significant byte first)\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\n\nexport const readUint32BigEndian = decoder => {\n  const uint = decoder.arr[decoder.pos + 3] + (decoder.arr[decoder.pos + 2] << 8) + (decoder.arr[decoder.pos + 1] << 16) + (decoder.arr[decoder.pos] << 24) >>> 0;\n  decoder.pos += 4;\n  return uint;\n};\n/**\n * Look ahead without incrementing the position\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\n\nexport const peekUint8 = decoder => decoder.arr[decoder.pos];\n/**\n * Look ahead without incrementing the position\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\n\nexport const peekUint16 = decoder => decoder.arr[decoder.pos] + (decoder.arr[decoder.pos + 1] << 8);\n/**\n * Look ahead without incrementing the position\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\n\nexport const peekUint32 = decoder => decoder.arr[decoder.pos] + (decoder.arr[decoder.pos + 1] << 8) + (decoder.arr[decoder.pos + 2] << 16) + (decoder.arr[decoder.pos + 3] << 24) >>> 0;\n/**\n * Read unsigned integer (32bit) with variable length.\n * 1/8th of the storage is used as encoding overhead.\n *  * numbers < 2^7 is stored in one bytlength\n *  * numbers < 2^14 is stored in two bylength\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.length\n */\n\nexport const readVarUint = decoder => {\n  let num = 0;\n  let len = 0;\n\n  while (true) {\n    const r = decoder.arr[decoder.pos++];\n    num = num | (r & binary.BITS7) << len;\n    len += 7;\n\n    if (r < binary.BIT8) {\n      return num >>> 0; // return unsigned number!\n    }\n    /* istanbul ignore if */\n\n\n    if (len > 53) {\n      throw new Error('Integer out of range!');\n    }\n  }\n};\n/**\n * Read signed integer (32bit) with variable length.\n * 1/8th of the storage is used as encoding overhead.\n *  * numbers < 2^7 is stored in one bytlength\n *  * numbers < 2^14 is stored in two bylength\n * @todo This should probably create the inverse ~num if number is negative - but this would be a breaking change.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.length\n */\n\nexport const readVarInt = decoder => {\n  let r = decoder.arr[decoder.pos++];\n  let num = r & binary.BITS6;\n  let len = 6;\n  const sign = (r & binary.BIT7) > 0 ? -1 : 1;\n\n  if ((r & binary.BIT8) === 0) {\n    // don't continue reading\n    return sign * num;\n  }\n\n  while (true) {\n    r = decoder.arr[decoder.pos++];\n    num = num | (r & binary.BITS7) << len;\n    len += 7;\n\n    if (r < binary.BIT8) {\n      return sign * (num >>> 0);\n    }\n    /* istanbul ignore if */\n\n\n    if (len > 53) {\n      throw new Error('Integer out of range!');\n    }\n  }\n};\n/**\n * Look ahead and read varUint without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {number}\n */\n\nexport const peekVarUint = decoder => {\n  const pos = decoder.pos;\n  const s = readVarUint(decoder);\n  decoder.pos = pos;\n  return s;\n};\n/**\n * Look ahead and read varUint without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {number}\n */\n\nexport const peekVarInt = decoder => {\n  const pos = decoder.pos;\n  const s = readVarInt(decoder);\n  decoder.pos = pos;\n  return s;\n};\n/**\n * Read string of variable length\n * * varUint is used to store the length of the string\n *\n * Transforming utf8 to a string is pretty expensive. The code performs 10x better\n * when String.fromCodePoint is fed with all characters as arguments.\n * But most environments have a maximum number of arguments per functions.\n * For effiency reasons we apply a maximum of 10000 characters at once.\n *\n * @function\n * @param {Decoder} decoder\n * @return {String} The read String.\n */\n\nexport const readVarString = decoder => {\n  let remainingLen = readVarUint(decoder);\n\n  if (remainingLen === 0) {\n    return '';\n  } else {\n    let encodedString = String.fromCodePoint(readUint8(decoder)); // remember to decrease remainingLen\n\n    if (--remainingLen < 100) {\n      // do not create a Uint8Array for small strings\n      while (remainingLen--) {\n        encodedString += String.fromCodePoint(readUint8(decoder));\n      }\n    } else {\n      while (remainingLen > 0) {\n        const nextLen = remainingLen < 10000 ? remainingLen : 10000; // this is dangerous, we create a fresh array view from the existing buffer\n\n        const bytes = decoder.arr.subarray(decoder.pos, decoder.pos + nextLen);\n        decoder.pos += nextLen; // Starting with ES5.1 we can supply a generic array-like object as arguments\n\n        encodedString += String.fromCodePoint.apply(null,\n        /** @type {any} */\n        bytes);\n        remainingLen -= nextLen;\n      }\n    }\n\n    return decodeURIComponent(escape(encodedString));\n  }\n};\n/**\n * Look ahead and read varString without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {string}\n */\n\nexport const peekVarString = decoder => {\n  const pos = decoder.pos;\n  const s = readVarString(decoder);\n  decoder.pos = pos;\n  return s;\n};\n/**\n * @param {Decoder} decoder\n * @param {number} len\n * @return {DataView}\n */\n\nexport const readFromDataView = (decoder, len) => {\n  const dv = new DataView(decoder.arr.buffer, decoder.arr.byteOffset + decoder.pos, len);\n  decoder.pos += len;\n  return dv;\n};\n/**\n * @param {Decoder} decoder\n */\n\nexport const readFloat32 = decoder => readFromDataView(decoder, 4).getFloat32(0, false);\n/**\n * @param {Decoder} decoder\n */\n\nexport const readFloat64 = decoder => readFromDataView(decoder, 8).getFloat64(0, false);\n/**\n * @param {Decoder} decoder\n */\n\nexport const readBigInt64 = decoder =>\n/** @type {any} */\nreadFromDataView(decoder, 8).getBigInt64(0, false);\n/**\n * @param {Decoder} decoder\n */\n\nexport const readBigUint64 = decoder =>\n/** @type {any} */\nreadFromDataView(decoder, 8).getBigUint64(0, false);\n/**\n * @type {Array<function(Decoder):any>}\n */\n\nconst readAnyLookupTable = [decoder => undefined, // CASE 127: undefined\ndecoder => null, // CASE 126: null\nreadVarInt, // CASE 125: integer\nreadFloat32, // CASE 124: float32\nreadFloat64, // CASE 123: float64\nreadBigInt64, // CASE 122: bigint\ndecoder => false, // CASE 121: boolean (false)\ndecoder => true, // CASE 120: boolean (true)\nreadVarString, // CASE 119: string\ndecoder => {\n  // CASE 118: object<string,any>\n  const len = readVarUint(decoder);\n  /**\n   * @type {Object<string,any>}\n   */\n\n  const obj = {};\n\n  for (let i = 0; i < len; i++) {\n    const key = readVarString(decoder);\n    obj[key] = readAny(decoder);\n  }\n\n  return obj;\n}, decoder => {\n  // CASE 117: array<any>\n  const len = readVarUint(decoder);\n  const arr = [];\n\n  for (let i = 0; i < len; i++) {\n    arr.push(readAny(decoder));\n  }\n\n  return arr;\n}, readVarUint8Array // CASE 116: Uint8Array\n];\n/**\n * @param {Decoder} decoder\n */\n\nexport const readAny = decoder => readAnyLookupTable[127 - readUint8(decoder)](decoder);\n/**\n * T must not be null.\n *\n * @template T\n */\n\nexport class RleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {function(Decoder):T} reader\n   */\n  constructor(uint8Array, reader) {\n    super(uint8Array);\n    /**\n     * The reader\n     */\n\n    this.reader = reader;\n    /**\n     * Current state\n     * @type {T|null}\n     */\n\n    this.s = null;\n    this.count = 0;\n  }\n\n  read() {\n    if (this.count === 0) {\n      this.s = this.reader(this);\n\n      if (hasContent(this)) {\n        this.count = readVarUint(this) + 1; // see encoder implementation for the reason why this is incremented\n      } else {\n        this.count = -1; // read the current value forever\n      }\n    }\n\n    this.count--;\n    return (\n      /** @type {T} */\n      this.s\n    );\n  }\n\n}\nexport class IntDiffDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {number} start\n   */\n  constructor(uint8Array, start) {\n    super(uint8Array);\n    /**\n     * Current state\n     * @type {number}\n     */\n\n    this.s = start;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  read() {\n    this.s += readVarInt(this);\n    return this.s;\n  }\n\n}\nexport class RleIntDiffDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {number} start\n   */\n  constructor(uint8Array, start) {\n    super(uint8Array);\n    /**\n     * Current state\n     * @type {number}\n     */\n\n    this.s = start;\n    this.count = 0;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  read() {\n    if (this.count === 0) {\n      this.s += readVarInt(this);\n\n      if (hasContent(this)) {\n        this.count = readVarUint(this) + 1; // see encoder implementation for the reason why this is incremented\n      } else {\n        this.count = -1; // read the current value forever\n      }\n    }\n\n    this.count--;\n    return (\n      /** @type {number} */\n      this.s\n    );\n  }\n\n}\nexport class UintOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor(uint8Array) {\n    super(uint8Array);\n    /**\n     * @type {number}\n     */\n\n    this.s = 0;\n    this.count = 0;\n  }\n\n  read() {\n    if (this.count === 0) {\n      this.s = readVarInt(this); // if the sign is negative, we read the count too, otherwise count is 1\n\n      const isNegative = math.isNegativeZero(this.s);\n      this.count = 1;\n\n      if (isNegative) {\n        this.s = -this.s;\n        this.count = readVarUint(this) + 2;\n      }\n    }\n\n    this.count--;\n    return (\n      /** @type {number} */\n      this.s\n    );\n  }\n\n}\nexport class IncUintOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor(uint8Array) {\n    super(uint8Array);\n    /**\n     * @type {number}\n     */\n\n    this.s = 0;\n    this.count = 0;\n  }\n\n  read() {\n    if (this.count === 0) {\n      this.s = readVarInt(this); // if the sign is negative, we read the count too, otherwise count is 1\n\n      const isNegative = math.isNegativeZero(this.s);\n      this.count = 1;\n\n      if (isNegative) {\n        this.s = -this.s;\n        this.count = readVarUint(this) + 2;\n      }\n    }\n\n    this.count--;\n    return (\n      /** @type {number} */\n      this.s++\n    );\n  }\n\n}\nexport class IntDiffOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor(uint8Array) {\n    super(uint8Array);\n    /**\n     * @type {number}\n     */\n\n    this.s = 0;\n    this.count = 0;\n    this.diff = 0;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  read() {\n    if (this.count === 0) {\n      const diff = readVarInt(this); // if the first bit is set, we read more data\n\n      const hasCount = diff & 1;\n      this.diff = diff >> 1;\n      this.count = 1;\n\n      if (hasCount) {\n        this.count = readVarUint(this) + 2;\n      }\n    }\n\n    this.s += this.diff;\n    this.count--;\n    return this.s;\n  }\n\n}\nexport class StringDecoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor(uint8Array) {\n    this.decoder = new UintOptRleDecoder(uint8Array);\n    this.str = readVarString(this.decoder);\n    /**\n     * @type {number}\n     */\n\n    this.spos = 0;\n  }\n  /**\n   * @return {string}\n   */\n\n\n  read() {\n    const end = this.spos + this.decoder.read();\n    const res = this.str.slice(this.spos, end);\n    this.spos = end;\n    return res;\n  }\n\n}","map":{"version":3,"names":["buffer","binary","math","Decoder","constructor","uint8Array","arr","pos","createDecoder","hasContent","decoder","length","clone","newPos","_decoder","readUint8Array","len","view","createUint8ArrayViewFromArrayBuffer","byteOffset","readVarUint8Array","readVarUint","readTailAsUint8Array","skip8","readUint8","readUint16","uint","readUint32","readUint32BigEndian","peekUint8","peekUint16","peekUint32","num","r","BITS7","BIT8","Error","readVarInt","BITS6","sign","BIT7","peekVarUint","s","peekVarInt","readVarString","remainingLen","encodedString","String","fromCodePoint","nextLen","bytes","subarray","apply","decodeURIComponent","escape","peekVarString","readFromDataView","dv","DataView","readFloat32","getFloat32","readFloat64","getFloat64","readBigInt64","getBigInt64","readBigUint64","getBigUint64","readAnyLookupTable","undefined","obj","i","key","readAny","push","RleDecoder","reader","count","read","IntDiffDecoder","start","RleIntDiffDecoder","UintOptRleDecoder","isNegative","isNegativeZero","IncUintOptRleDecoder","IntDiffOptRleDecoder","diff","hasCount","StringDecoder","str","spos","end","res","slice"],"sources":["/Users/kuldeepupreti/Downloads/Projects/personal/yjs/node_modules/lib0/decoding.js"],"sourcesContent":["/**\n * Efficient schema-less binary decoding with support for variable length encoding.\n *\n * Use [lib0/decoding] with [lib0/encoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = new encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = new decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module decoding\n */\n\nimport * as buffer from './buffer.js'\nimport * as binary from './binary.js'\nimport * as math from './math.js'\n\n/**\n * A Decoder handles the decoding of an Uint8Array.\n */\nexport class Decoder {\n  /**\n   * @param {Uint8Array} uint8Array Binary data to decode\n   */\n  constructor (uint8Array) {\n    /**\n     * Decoding target.\n     *\n     * @type {Uint8Array}\n     */\n    this.arr = uint8Array\n    /**\n     * Current decoding position.\n     *\n     * @type {number}\n     */\n    this.pos = 0\n  }\n}\n\n/**\n * @function\n * @param {Uint8Array} uint8Array\n * @return {Decoder}\n */\nexport const createDecoder = uint8Array => new Decoder(uint8Array)\n\n/**\n * @function\n * @param {Decoder} decoder\n * @return {boolean}\n */\nexport const hasContent = decoder => decoder.pos !== decoder.arr.length\n\n/**\n * Clone a decoder instance.\n * Optionally set a new position parameter.\n *\n * @function\n * @param {Decoder} decoder The decoder instance\n * @param {number} [newPos] Defaults to current position\n * @return {Decoder} A clone of `decoder`\n */\nexport const clone = (decoder, newPos = decoder.pos) => {\n  const _decoder = createDecoder(decoder.arr)\n  _decoder.pos = newPos\n  return _decoder\n}\n\n/**\n * Create an Uint8Array view of the next `len` bytes and advance the position by `len`.\n *\n * Important: The Uint8Array still points to the underlying ArrayBuffer. Make sure to discard the result as soon as possible to prevent any memory leaks.\n *            Use `buffer.copyUint8Array` to copy the result into a new Uint8Array.\n *\n * @function\n * @param {Decoder} decoder The decoder instance\n * @param {number} len The length of bytes to read\n * @return {Uint8Array}\n */\nexport const readUint8Array = (decoder, len) => {\n  const view = buffer.createUint8ArrayViewFromArrayBuffer(decoder.arr.buffer, decoder.pos + decoder.arr.byteOffset, len)\n  decoder.pos += len\n  return view\n}\n\n/**\n * Read variable length Uint8Array.\n *\n * Important: The Uint8Array still points to the underlying ArrayBuffer. Make sure to discard the result as soon as possible to prevent any memory leaks.\n *            Use `buffer.copyUint8Array` to copy the result into a new Uint8Array.\n *\n * @function\n * @param {Decoder} decoder\n * @return {Uint8Array}\n */\nexport const readVarUint8Array = decoder => readUint8Array(decoder, readVarUint(decoder))\n\n/**\n * Read the rest of the content as an ArrayBuffer\n * @function\n * @param {Decoder} decoder\n * @return {Uint8Array}\n */\nexport const readTailAsUint8Array = decoder => readUint8Array(decoder, decoder.arr.length - decoder.pos)\n\n/**\n * Skip one byte, jump to the next position.\n * @function\n * @param {Decoder} decoder The decoder instance\n * @return {number} The next position\n */\nexport const skip8 = decoder => decoder.pos++\n\n/**\n * Read one byte as unsigned integer.\n * @function\n * @param {Decoder} decoder The decoder instance\n * @return {number} Unsigned 8-bit integer\n */\nexport const readUint8 = decoder => decoder.arr[decoder.pos++]\n\n/**\n * Read 2 bytes as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const readUint16 = decoder => {\n  const uint =\n    decoder.arr[decoder.pos] +\n    (decoder.arr[decoder.pos + 1] << 8)\n  decoder.pos += 2\n  return uint\n}\n\n/**\n * Read 4 bytes as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const readUint32 = decoder => {\n  const uint =\n    (decoder.arr[decoder.pos] +\n    (decoder.arr[decoder.pos + 1] << 8) +\n    (decoder.arr[decoder.pos + 2] << 16) +\n    (decoder.arr[decoder.pos + 3] << 24)) >>> 0\n  decoder.pos += 4\n  return uint\n}\n\n/**\n * Read 4 bytes as unsigned integer in big endian order.\n * (most significant byte first)\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const readUint32BigEndian = decoder => {\n  const uint =\n    (decoder.arr[decoder.pos + 3] +\n    (decoder.arr[decoder.pos + 2] << 8) +\n    (decoder.arr[decoder.pos + 1] << 16) +\n    (decoder.arr[decoder.pos] << 24)) >>> 0\n  decoder.pos += 4\n  return uint\n}\n\n/**\n * Look ahead without incrementing the position\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const peekUint8 = decoder => decoder.arr[decoder.pos]\n\n/**\n * Look ahead without incrementing the position\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const peekUint16 = decoder =>\n  decoder.arr[decoder.pos] +\n  (decoder.arr[decoder.pos + 1] << 8)\n\n/**\n * Look ahead without incrementing the position\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const peekUint32 = decoder => (\n  decoder.arr[decoder.pos] +\n  (decoder.arr[decoder.pos + 1] << 8) +\n  (decoder.arr[decoder.pos + 2] << 16) +\n  (decoder.arr[decoder.pos + 3] << 24)\n) >>> 0\n\n/**\n * Read unsigned integer (32bit) with variable length.\n * 1/8th of the storage is used as encoding overhead.\n *  * numbers < 2^7 is stored in one bytlength\n *  * numbers < 2^14 is stored in two bylength\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.length\n */\nexport const readVarUint = decoder => {\n  let num = 0\n  let len = 0\n  while (true) {\n    const r = decoder.arr[decoder.pos++]\n    num = num | ((r & binary.BITS7) << len)\n    len += 7\n    if (r < binary.BIT8) {\n      return num >>> 0 // return unsigned number!\n    }\n    /* istanbul ignore if */\n    if (len > 53) {\n      throw new Error('Integer out of range!')\n    }\n  }\n}\n\n/**\n * Read signed integer (32bit) with variable length.\n * 1/8th of the storage is used as encoding overhead.\n *  * numbers < 2^7 is stored in one bytlength\n *  * numbers < 2^14 is stored in two bylength\n * @todo This should probably create the inverse ~num if number is negative - but this would be a breaking change.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.length\n */\nexport const readVarInt = decoder => {\n  let r = decoder.arr[decoder.pos++]\n  let num = r & binary.BITS6\n  let len = 6\n  const sign = (r & binary.BIT7) > 0 ? -1 : 1\n  if ((r & binary.BIT8) === 0) {\n    // don't continue reading\n    return sign * num\n  }\n  while (true) {\n    r = decoder.arr[decoder.pos++]\n    num = num | ((r & binary.BITS7) << len)\n    len += 7\n    if (r < binary.BIT8) {\n      return sign * (num >>> 0)\n    }\n    /* istanbul ignore if */\n    if (len > 53) {\n      throw new Error('Integer out of range!')\n    }\n  }\n}\n\n/**\n * Look ahead and read varUint without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {number}\n */\nexport const peekVarUint = decoder => {\n  const pos = decoder.pos\n  const s = readVarUint(decoder)\n  decoder.pos = pos\n  return s\n}\n\n/**\n * Look ahead and read varUint without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {number}\n */\nexport const peekVarInt = decoder => {\n  const pos = decoder.pos\n  const s = readVarInt(decoder)\n  decoder.pos = pos\n  return s\n}\n\n/**\n * Read string of variable length\n * * varUint is used to store the length of the string\n *\n * Transforming utf8 to a string is pretty expensive. The code performs 10x better\n * when String.fromCodePoint is fed with all characters as arguments.\n * But most environments have a maximum number of arguments per functions.\n * For effiency reasons we apply a maximum of 10000 characters at once.\n *\n * @function\n * @param {Decoder} decoder\n * @return {String} The read String.\n */\nexport const readVarString = decoder => {\n  let remainingLen = readVarUint(decoder)\n  if (remainingLen === 0) {\n    return ''\n  } else {\n    let encodedString = String.fromCodePoint(readUint8(decoder)) // remember to decrease remainingLen\n    if (--remainingLen < 100) { // do not create a Uint8Array for small strings\n      while (remainingLen--) {\n        encodedString += String.fromCodePoint(readUint8(decoder))\n      }\n    } else {\n      while (remainingLen > 0) {\n        const nextLen = remainingLen < 10000 ? remainingLen : 10000\n        // this is dangerous, we create a fresh array view from the existing buffer\n        const bytes = decoder.arr.subarray(decoder.pos, decoder.pos + nextLen)\n        decoder.pos += nextLen\n        // Starting with ES5.1 we can supply a generic array-like object as arguments\n        encodedString += String.fromCodePoint.apply(null, /** @type {any} */ (bytes))\n        remainingLen -= nextLen\n      }\n    }\n    return decodeURIComponent(escape(encodedString))\n  }\n}\n\n/**\n * Look ahead and read varString without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {string}\n */\nexport const peekVarString = decoder => {\n  const pos = decoder.pos\n  const s = readVarString(decoder)\n  decoder.pos = pos\n  return s\n}\n\n/**\n * @param {Decoder} decoder\n * @param {number} len\n * @return {DataView}\n */\nexport const readFromDataView = (decoder, len) => {\n  const dv = new DataView(decoder.arr.buffer, decoder.arr.byteOffset + decoder.pos, len)\n  decoder.pos += len\n  return dv\n}\n\n/**\n * @param {Decoder} decoder\n */\nexport const readFloat32 = decoder => readFromDataView(decoder, 4).getFloat32(0, false)\n\n/**\n * @param {Decoder} decoder\n */\nexport const readFloat64 = decoder => readFromDataView(decoder, 8).getFloat64(0, false)\n\n/**\n * @param {Decoder} decoder\n */\nexport const readBigInt64 = decoder => /** @type {any} */ (readFromDataView(decoder, 8)).getBigInt64(0, false)\n\n/**\n * @param {Decoder} decoder\n */\nexport const readBigUint64 = decoder => /** @type {any} */ (readFromDataView(decoder, 8)).getBigUint64(0, false)\n\n/**\n * @type {Array<function(Decoder):any>}\n */\nconst readAnyLookupTable = [\n  decoder => undefined, // CASE 127: undefined\n  decoder => null, // CASE 126: null\n  readVarInt, // CASE 125: integer\n  readFloat32, // CASE 124: float32\n  readFloat64, // CASE 123: float64\n  readBigInt64, // CASE 122: bigint\n  decoder => false, // CASE 121: boolean (false)\n  decoder => true, // CASE 120: boolean (true)\n  readVarString, // CASE 119: string\n  decoder => { // CASE 118: object<string,any>\n    const len = readVarUint(decoder)\n    /**\n     * @type {Object<string,any>}\n     */\n    const obj = {}\n    for (let i = 0; i < len; i++) {\n      const key = readVarString(decoder)\n      obj[key] = readAny(decoder)\n    }\n    return obj\n  },\n  decoder => { // CASE 117: array<any>\n    const len = readVarUint(decoder)\n    const arr = []\n    for (let i = 0; i < len; i++) {\n      arr.push(readAny(decoder))\n    }\n    return arr\n  },\n  readVarUint8Array // CASE 116: Uint8Array\n]\n\n/**\n * @param {Decoder} decoder\n */\nexport const readAny = decoder => readAnyLookupTable[127 - readUint8(decoder)](decoder)\n\n/**\n * T must not be null.\n *\n * @template T\n */\nexport class RleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {function(Decoder):T} reader\n   */\n  constructor (uint8Array, reader) {\n    super(uint8Array)\n    /**\n     * The reader\n     */\n    this.reader = reader\n    /**\n     * Current state\n     * @type {T|null}\n     */\n    this.s = null\n    this.count = 0\n  }\n\n  read () {\n    if (this.count === 0) {\n      this.s = this.reader(this)\n      if (hasContent(this)) {\n        this.count = readVarUint(this) + 1 // see encoder implementation for the reason why this is incremented\n      } else {\n        this.count = -1 // read the current value forever\n      }\n    }\n    this.count--\n    return /** @type {T} */ (this.s)\n  }\n}\n\nexport class IntDiffDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {number} start\n   */\n  constructor (uint8Array, start) {\n    super(uint8Array)\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n  }\n\n  /**\n   * @return {number}\n   */\n  read () {\n    this.s += readVarInt(this)\n    return this.s\n  }\n}\n\nexport class RleIntDiffDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {number} start\n   */\n  constructor (uint8Array, start) {\n    super(uint8Array)\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n    this.count = 0\n  }\n\n  /**\n   * @return {number}\n   */\n  read () {\n    if (this.count === 0) {\n      this.s += readVarInt(this)\n      if (hasContent(this)) {\n        this.count = readVarUint(this) + 1 // see encoder implementation for the reason why this is incremented\n      } else {\n        this.count = -1 // read the current value forever\n      }\n    }\n    this.count--\n    return /** @type {number} */ (this.s)\n  }\n}\n\nexport class UintOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    super(uint8Array)\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  read () {\n    if (this.count === 0) {\n      this.s = readVarInt(this)\n      // if the sign is negative, we read the count too, otherwise count is 1\n      const isNegative = math.isNegativeZero(this.s)\n      this.count = 1\n      if (isNegative) {\n        this.s = -this.s\n        this.count = readVarUint(this) + 2\n      }\n    }\n    this.count--\n    return /** @type {number} */ (this.s)\n  }\n}\n\nexport class IncUintOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    super(uint8Array)\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  read () {\n    if (this.count === 0) {\n      this.s = readVarInt(this)\n      // if the sign is negative, we read the count too, otherwise count is 1\n      const isNegative = math.isNegativeZero(this.s)\n      this.count = 1\n      if (isNegative) {\n        this.s = -this.s\n        this.count = readVarUint(this) + 2\n      }\n    }\n    this.count--\n    return /** @type {number} */ (this.s++)\n  }\n}\n\nexport class IntDiffOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    super(uint8Array)\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n    this.diff = 0\n  }\n\n  /**\n   * @return {number}\n   */\n  read () {\n    if (this.count === 0) {\n      const diff = readVarInt(this)\n      // if the first bit is set, we read more data\n      const hasCount = diff & 1\n      this.diff = diff >> 1\n      this.count = 1\n      if (hasCount) {\n        this.count = readVarUint(this) + 2\n      }\n    }\n    this.s += this.diff\n    this.count--\n    return this.s\n  }\n}\n\nexport class StringDecoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    this.decoder = new UintOptRleDecoder(uint8Array)\n    this.str = readVarString(this.decoder)\n    /**\n     * @type {number}\n     */\n    this.spos = 0\n  }\n\n  /**\n   * @return {string}\n   */\n  read () {\n    const end = this.spos + this.decoder.read()\n    const res = this.str.slice(this.spos, end)\n    this.spos = end\n    return res\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}